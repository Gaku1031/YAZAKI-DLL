name: Test Blood Pressure Estimation (Optimal - dlib + OpenCV DNN)

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      test_video:
        description: "Test video file path (relative to sample-data/)"
        required: true
        default: "sample_1M.webm"
      test_duration:
        description: "Test duration in seconds (0 for full video)"
        required: false
        default: 30
        type: number
      performance_monitoring:
        description: "Enable detailed performance monitoring"
        required: false
        default: true
        type: boolean

env:
  TEST_VIDEO: ${{ github.event.inputs.test_video || 'sample_1M.webm' }}
  TEST_DURATION: ${{ github.event.inputs.test_duration || '30' }}
  PERFORMANCE_MONITORING: ${{ github.event.inputs.performance_monitoring || 'true' }}

jobs:
  test-blood-pressure-estimation-optimal:
    runs-on: windows-latest
    name: Test Blood Pressure Estimation (Optimal - dlib + OpenCV DNN)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Verify required files exist (Optimal)
        run: |
          Write-Host "Verifying required files for optimal blood pressure estimation test..." -ForegroundColor Yellow

          # Check main DLL
          if (!(Test-Path "BloodPressureDLL.dll")) {
            Write-Host "ERROR: BloodPressureDLL.dll not found in root directory" -ForegroundColor Red
            exit 1
          }
          $dllSize = [math]::Round((Get-Item "BloodPressureDLL.dll").Length / 1MB, 2)
          Write-Host "BloodPressureDLL.dll found ($dllSize MB)" -ForegroundColor Green

          # Check critical dependency DLLs
          $criticalDlls = @(
            "opencv_core4.dll",
            "opencv_dnn4.dll", 
            "opencv_imgcodecs4.dll",
            "opencv_imgproc4.dll",
            "opencv_objdetect4.dll",
            "onnxruntime.dll"
          )

          foreach ($dll in $criticalDlls) {
            if (Test-Path $dll) {
              $size = [math]::Round((Get-Item $dll).Length / 1MB, 2)
              Write-Host "$dll found ($size MB)" -ForegroundColor Green
            } else {
              Write-Host "ERROR: $dll not found" -ForegroundColor Red
              exit 1
            }
          }

          # Check model files (OpenCV DNN models)
          $modelFiles = @(
            "CppBloodPressureDLL/models/systolicbloodpressure.onnx",
            "CppBloodPressureDLL/models/diastolicbloodpressure.onnx",
            "CppBloodPressureDLL/models/opencv_face_detector.pbtxt",
            "CppBloodPressureDLL/models/opencv_face_detector_uint8.pb"
          )

          foreach ($model in $modelFiles) {
            if (Test-Path $model) {
              $size = [math]::Round((Get-Item $model).Length / 1MB, 2)
              Write-Host "$model found ($size MB)" -ForegroundColor Green
            } else {
              Write-Host "ERROR: $model not found" -ForegroundColor Red
              exit 1
            }
          }

          # Check header file
          if (Test-Path "CppBloodPressureDLL/include/BloodPressureDLL.h") {
            Write-Host "BloodPressureDLL.h found" -ForegroundColor Green
          } else {
            Write-Host "ERROR: BloodPressureDLL.h not found" -ForegroundColor Red
            exit 1
          }

          # Note: Optimal configuration
          Write-Host "Optimal configuration verified" -ForegroundColor Green
          Write-Host "  - dlib frontal face detector (built-in, high accuracy)" -ForegroundColor Cyan
          Write-Host "  - OpenCV DNN face detection (fast, GPU-accelerated)" -ForegroundColor Cyan
          Write-Host "  - No shape predictor (~100MB saved)" -ForegroundColor Cyan
          Write-Host "  - Best balance of accuracy and performance" -ForegroundColor Cyan

          Write-Host "All required files verified successfully!" -ForegroundColor Green
        shell: powershell

      - name: Create optimal test application
        run: |
          Write-Host "Creating optimal blood pressure estimation test application..." -ForegroundColor Yellow

          # Create test directory
          New-Item -ItemType Directory -Path "test_bp_estimation_optimal" -Force | Out-Null
          cd test_bp_estimation_optimal

          # Create C# test application (optimal version)
          Write-Host "Creating Program.cs content..." -ForegroundColor Yellow

          # Create Program.cs using a simple approach
          Write-Host "Creating Program.cs using simple file creation..." -ForegroundColor Yellow

          # Create Program.cs content using Add-Content to avoid YAML issues
          New-Item -ItemType File -Path "Program.cs" -Force | Out-Null

          Add-Content -Path "Program.cs" -Value "using System;"
          Add-Content -Path "Program.cs" -Value "using System.Runtime.InteropServices;"
          Add-Content -Path "Program.cs" -Value "using System.Diagnostics;"
          Add-Content -Path "Program.cs" -Value "using System.IO;"
          Add-Content -Path "Program.cs" -Value "using System.Text;"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "namespace BloodPressureTestOptimal"
          Add-Content -Path "Program.cs" -Value "{"
          Add-Content -Path "Program.cs" -Value "    public class BloodPressureEstimator"
          Add-Content -Path "Program.cs" -Value "    {"
          Add-Content -Path "Program.cs" -Value '        [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl)]'
          Add-Content -Path "Program.cs" -Value "        public static extern IntPtr CreateBloodPressureEstimator();"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '        [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl)]'
          Add-Content -Path "Program.cs" -Value "        public static extern void DestroyBloodPressureEstimator(IntPtr estimator);"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '        [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl)]'
          Add-Content -Path "Program.cs" -Value "        public static extern int EstimateBloodPressure(IntPtr estimator, string videoPath,"
          Add-Content -Path "Program.cs" -Value "            out double systolic, out double diastolic, out double confidence);"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '        [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl)]'
          Add-Content -Path "Program.cs" -Value "        public static extern int GetLastError(IntPtr estimator, StringBuilder errorMessage, int maxLength);"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '        [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl)]'
          Add-Content -Path "Program.cs" -Value "        public static extern int GetPerformanceMetrics(IntPtr estimator,"
          Add-Content -Path "Program.cs" -Value "            out double initializationTime, out double processingTime, out double totalTime,"
          Add-Content -Path "Program.cs" -Value "            out int frameCount, out double fps);"
          Add-Content -Path "Program.cs" -Value "    }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "    class Program"
          Add-Content -Path "Program.cs" -Value "    {"
          Add-Content -Path "Program.cs" -Value "        static void Main(string[] args)"
          Add-Content -Path "Program.cs" -Value "        {"
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine("=== Optimal Blood Pressure Estimation Test ===");'
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine("Configuration: dlib frontal face detector + OpenCV DNN");'
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine("Benefits: High accuracy + Fast processing + Small package");'
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine($"Test Video: {Environment.GetEnvironmentVariable("TEST_VIDEO")}");'
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine($"Test Duration: {Environment.GetEnvironmentVariable("TEST_DURATION")} seconds");'
          Add-Content -Path "Program.cs" -Value '            Console.WriteLine($"Performance Monitoring: {Environment.GetEnvironmentVariable("PERFORMANCE_MONITORING")}");'
          Add-Content -Path "Program.cs" -Value "            Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "            var stopwatch = Stopwatch.StartNew();"
          Add-Content -Path "Program.cs" -Value "            var process = Process.GetCurrentProcess();"
          Add-Content -Path "Program.cs" -Value "            var initialMemory = process.WorkingSet64;"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "            try"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine("Setting up optimal test environment...");'
          Add-Content -Path "Program.cs" -Value "                CopyRequiredFiles();"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine("Initializing optimal blood pressure estimator...");'
          Add-Content -Path "Program.cs" -Value "                var estimator = BloodPressureEstimator.CreateBloodPressureEstimator();"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                if (estimator == IntPtr.Zero)"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("ERROR: Failed to create blood pressure estimator");'
          Add-Content -Path "Program.cs" -Value "                    return;"
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '                var videoPath = Path.Combine("..", "sample-data", Environment.GetEnvironmentVariable("TEST_VIDEO"));'
          Add-Content -Path "Program.cs" -Value "                if (!File.Exists(videoPath))"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"ERROR: Test video not found: {videoPath}");'
          Add-Content -Path "Program.cs" -Value "                    return;"
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine($"Processing video: {videoPath}");'
          Add-Content -Path "Program.cs" -Value "                var fileInfo = new FileInfo(videoPath);"
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine($"Video size: {fileInfo.Length / 1024 / 1024:F2} MB");'
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                double systolic, diastolic, confidence;"
          Add-Content -Path "Program.cs" -Value "                var result = BloodPressureEstimator.EstimateBloodPressure(estimator, videoPath,"
          Add-Content -Path "Program.cs" -Value "                    out systolic, out diastolic, out confidence);"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                if (result == 0)"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value "                    double initTime, procTime, totalTime;"
          Add-Content -Path "Program.cs" -Value "                    int frameCount;"
          Add-Content -Path "Program.cs" -Value "                    double fps;"
          Add-Content -Path "Program.cs" -Value "                    BloodPressureEstimator.GetPerformanceMetrics(estimator,"
          Add-Content -Path "Program.cs" -Value "                        out initTime, out procTime, out totalTime, out frameCount, out fps);"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    process.Refresh();"
          Add-Content -Path "Program.cs" -Value "                    var finalMemory = process.WorkingSet64;"
          Add-Content -Path "Program.cs" -Value "                    var memoryUsed = (finalMemory - initialMemory) / 1024 / 1024;"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    var cpuTime = process.TotalProcessorTime;"
          Add-Content -Path "Program.cs" -Value "                    var cpuUsage = (cpuTime.TotalMilliseconds / stopwatch.ElapsedMilliseconds) * 100;"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("=== OPTIMAL RESULTS ===");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Success: true");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Systolic Blood Pressure: {systolic:F1} mmHg");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Diastolic Blood Pressure: {diastolic:F1} mmHg");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Confidence: {confidence:F2}");'
          Add-Content -Path "Program.cs" -Value "                    Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("=== PERFORMANCE METRICS (Optimal) ===");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Total Time: {totalTime:F2} seconds");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Initialization Time: {initTime:F2} seconds");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Processing Time: {procTime:F2} seconds");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Frame Count: {frameCount}");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Frames Per Second: {fps:F2}");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Memory Usage: {memoryUsed:F2} MB");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"CPU Usage: {cpuUsage:F1}%");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Video File Size: {fileInfo.Length / 1024 / 1024:F2} MB");'
          Add-Content -Path "Program.cs" -Value "                    Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    var processingEfficiency = (procTime / totalTime) * 100;"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Processing Efficiency: {processingEfficiency:F1}%");'
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    var throughput = frameCount / totalTime;"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Throughput: {throughput:F2} frames/second");'
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    var memoryEfficiency = fileInfo.Length / 1024 / 1024 / memoryUsed;"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Memory Efficiency: {memoryEfficiency:F2} MB video per MB RAM");'
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("=== OPTIMAL BENEFITS ===");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("dlib frontal face detector (high accuracy, low false positives)");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("OpenCV DNN face detection (fast, GPU-accelerated)");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("Reduced package size by ~100MB (no shape predictor)");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("Faster initialization (no large model loading)");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("Lower memory footprint");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("Best balance of accuracy and performance");'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("Robust face detection (dual approach)");'
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                    Console.WriteLine();"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine("=== OPTIMAL TEST COMPLETED SUCCESSFULLY ===");'
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value "                else"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value "                    var errorMessage = new StringBuilder(1024);"
          Add-Content -Path "Program.cs" -Value "                    BloodPressureEstimator.GetLastError(estimator, errorMessage, 1024);"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"ERROR: Blood pressure estimation failed: {errorMessage}");'
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                BloodPressureEstimator.DestroyBloodPressureEstimator(estimator);"
          Add-Content -Path "Program.cs" -Value "            }"
          Add-Content -Path "Program.cs" -Value "            catch (Exception ex)"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine($"ERROR: {ex.Message}");'
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine($"Stack trace: {ex.StackTrace}");'
          Add-Content -Path "Program.cs" -Value "            }"
          Add-Content -Path "Program.cs" -Value "            finally"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value "                stopwatch.Stop();"
          Add-Content -Path "Program.cs" -Value '                Console.WriteLine($"Total test time: {stopwatch.ElapsedMilliseconds / 1000:F2} seconds");'
          Add-Content -Path "Program.cs" -Value "            }"
          Add-Content -Path "Program.cs" -Value "        }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "        static void CopyRequiredFiles()"
          Add-Content -Path "Program.cs" -Value "        {"
          Add-Content -Path "Program.cs" -Value "            var files = new[]"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value '                "BloodPressureDLL.dll",'
          Add-Content -Path "Program.cs" -Value '                "opencv_core4.dll",'
          Add-Content -Path "Program.cs" -Value '                "opencv_dnn4.dll",'
          Add-Content -Path "Program.cs" -Value '                "opencv_imgcodecs4.dll",'
          Add-Content -Path "Program.cs" -Value '                "opencv_imgproc4.dll",'
          Add-Content -Path "Program.cs" -Value '                "opencv_objdetect4.dll",'
          Add-Content -Path "Program.cs" -Value '                "onnxruntime.dll",'
          Add-Content -Path "Program.cs" -Value '                "abseil_dll.dll",'
          Add-Content -Path "Program.cs" -Value '                "jpeg62.dll",'
          Add-Content -Path "Program.cs" -Value '                "libgcc_s_seh-1.dll",'
          Add-Content -Path "Program.cs" -Value '                "libgfortran-5.dll",'
          Add-Content -Path "Program.cs" -Value '                "liblapack.dll",'
          Add-Content -Path "Program.cs" -Value '                "liblzma.dll",'
          Add-Content -Path "Program.cs" -Value '                "libpng16.dll",'
          Add-Content -Path "Program.cs" -Value '                "libprotobuf.dll",'
          Add-Content -Path "Program.cs" -Value '                "libquadmath-0.dll",'
          Add-Content -Path "Program.cs" -Value '                "libsharpyuv.dll",'
          Add-Content -Path "Program.cs" -Value '                "libwebp.dll",'
          Add-Content -Path "Program.cs" -Value '                "libwebpdecoder.dll",'
          Add-Content -Path "Program.cs" -Value '                "libwebpdemux.dll",'
          Add-Content -Path "Program.cs" -Value '                "libwebpmux.dll",'
          Add-Content -Path "Program.cs" -Value '                "libwinpthread-1.dll",'
          Add-Content -Path "Program.cs" -Value '                "openblas.dll",'
          Add-Content -Path "Program.cs" -Value '                "tiff.dll",'
          Add-Content -Path "Program.cs" -Value '                "zlib1.dll"'
          Add-Content -Path "Program.cs" -Value "            };"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "            foreach (var file in files)"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value '                if (File.Exists(Path.Combine("..", file)))'
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value '                    File.Copy(Path.Combine("..", file), file, true);'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Copied: {file}");'
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value "                else"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Warning: {file} not found");'
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value "            }"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value '            var modelsDir = Path.Combine("..", "CppBloodPressureDLL", "models");'
          Add-Content -Path "Program.cs" -Value "            if (Directory.Exists(modelsDir))"
          Add-Content -Path "Program.cs" -Value "            {"
          Add-Content -Path "Program.cs" -Value '                if (Directory.Exists("models"))'
          Add-Content -Path "Program.cs" -Value "                    Directory.Delete(\"models\", true);"
          Add-Content -Path "Program.cs" -Value "                Directory.CreateDirectory(\"models\");"
          Add-Content -Path "Program.cs" -Value ""
          Add-Content -Path "Program.cs" -Value "                foreach (var file in Directory.GetFiles(modelsDir))"
          Add-Content -Path "Program.cs" -Value "                {"
          Add-Content -Path "Program.cs" -Value "                    var fileName = Path.GetFileName(file);"
          Add-Content -Path "Program.cs" -Value '                    if (fileName.Contains("shape_predictor_68_face_landmarks.dat"))'
          Add-Content -Path "Program.cs" -Value "                    {"
          Add-Content -Path "Program.cs" -Value '                        Console.WriteLine($"Skipped dlib shape predictor: {fileName}");'
          Add-Content -Path "Program.cs" -Value "                        continue;"
          Add-Content -Path "Program.cs" -Value "                    }"
          Add-Content -Path "Program.cs" -Value '                    File.Copy(file, Path.Combine("models", fileName), true);'
          Add-Content -Path "Program.cs" -Value '                    Console.WriteLine($"Copied model: {fileName}");'
          Add-Content -Path "Program.cs" -Value "                }"
          Add-Content -Path "Program.cs" -Value "            }"
          Add-Content -Path "Program.cs" -Value "        }"
          Add-Content -Path "Program.cs" -Value "    }"
          Add-Content -Path "Program.cs" -Value "}"

          # Write Program.cs line by line
          $programLines | Out-File -FilePath "Program.cs" -Encoding UTF8

          # Create project file
          Write-Host "Creating BloodPressureTestOptimal.csproj content..." -ForegroundColor Yellow

          # Create project file using Add-Content
          New-Item -ItemType File -Path "BloodPressureTestOptimal.csproj" -Force | Out-Null

          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '<Project Sdk="Microsoft.NET.Sdk">'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '  <PropertyGroup>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '    <OutputType>Exe</OutputType>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '    <TargetFramework>net6.0</TargetFramework>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '    <PlatformTarget>x64</PlatformTarget>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '  </PropertyGroup>'
          Add-Content -Path "BloodPressureTestOptimal.csproj" -Value '</Project>'

          Write-Host "Files written successfully" -ForegroundColor Green

          # Verify files were created
          Write-Host "Verifying created files..." -ForegroundColor Yellow
          if (Test-Path "Program.cs") {
            $programSize = (Get-Item "Program.cs").Length
            Write-Host "Program.cs created successfully ($programSize bytes)" -ForegroundColor Green
          } else {
            Write-Host "ERROR: Program.cs was not created" -ForegroundColor Red
            exit 1
          }

          if (Test-Path "BloodPressureTestOptimal.csproj") {
            $projectSize = (Get-Item "BloodPressureTestOptimal.csproj").Length
            Write-Host "BloodPressureTestOptimal.csproj created successfully ($projectSize bytes)" -ForegroundColor Green
          } else {
            Write-Host "ERROR: BloodPressureTestOptimal.csproj was not created" -ForegroundColor Red
            exit 1
          }

          # Show directory contents
          Write-Host "Current directory contents:" -ForegroundColor Cyan
          Get-ChildItem -Name

          Write-Host "Optimal test application created successfully" -ForegroundColor Green
        shell: powershell

      - name: Build optimal test application
        run: |
          Write-Host "Building optimal test application..." -ForegroundColor Yellow

          # Check if test directory exists
          if (!(Test-Path "test_bp_estimation_optimal")) {
            Write-Host "ERROR: test_bp_estimation_optimal directory not found" -ForegroundColor Red
            Write-Host "This means the Create optimal test application step failed" -ForegroundColor Red
            exit 1
          }

          # Check if project file exists
          if (!(Test-Path "test_bp_estimation_optimal/BloodPressureTestOptimal.csproj")) {
            Write-Host "ERROR: BloodPressureTestOptimal.csproj not found" -ForegroundColor Red
            Write-Host "This means the project file was not created properly" -ForegroundColor Red
            Write-Host "Checking test_bp_estimation_optimal directory contents:" -ForegroundColor Red
            if (Test-Path "test_bp_estimation_optimal") {
              Get-ChildItem "test_bp_estimation_optimal" -Name
            } else {
              Write-Host "test_bp_estimation_optimal directory does not exist" -ForegroundColor Red
            }
            exit 1
          }

          # Check if Program.cs exists
          if (!(Test-Path "test_bp_estimation_optimal/Program.cs")) {
            Write-Host "ERROR: Program.cs not found" -ForegroundColor Red
            Write-Host "This means the source file was not created properly" -ForegroundColor Red
            Write-Host "Checking test_bp_estimation_optimal directory contents:" -ForegroundColor Red
            if (Test-Path "test_bp_estimation_optimal") {
              Get-ChildItem "test_bp_estimation_optimal" -Name
            } else {
              Write-Host "test_bp_estimation_optimal directory does not exist" -ForegroundColor Red
            }
            exit 1
          }

          Write-Host "Test directory and files verified, proceeding with build..." -ForegroundColor Green

          cd test_bp_estimation_optimal

          # Show current directory contents
          Write-Host "Current directory contents:" -ForegroundColor Cyan
          Get-ChildItem -Name

          # Restore dependencies
          Write-Host "Restoring dependencies..." -ForegroundColor Yellow
          dotnet restore

          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Failed to restore dependencies" -ForegroundColor Red
            exit 1
          }

          # Build the application
          Write-Host "Building application..." -ForegroundColor Yellow
          dotnet build -c Release

          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Failed to build optimal test application" -ForegroundColor Red
            Write-Host "Build output:" -ForegroundColor Red
            dotnet build -c Release --verbosity detailed
            exit 1
          }

          # Verify build output
          $exePath = "bin/Release/net6.0/BloodPressureTestOptimal.exe"
          if (Test-Path $exePath) {
            Write-Host "Optimal test application built successfully" -ForegroundColor Green
            Write-Host "Executable location: $exePath" -ForegroundColor Cyan
          } else {
            Write-Host "ERROR: Executable not found after build" -ForegroundColor Red
            Write-Host "Build output directory contents:" -ForegroundColor Red
            $buildDir = "bin/Release/net6.0"
            if (Test-Path $buildDir) {
              Get-ChildItem $buildDir -Name
            } else {
              Write-Host "$buildDir directory does not exist" -ForegroundColor Red
            }
            exit 1
          }
        shell: powershell

      - name: Run optimal blood pressure estimation test
        run: |
          Write-Host "Running optimal blood pressure estimation test..." -ForegroundColor Yellow

          # Check if test directory exists
          if (!(Test-Path "test_bp_estimation_optimal")) {
            Write-Host "ERROR: test_bp_estimation_optimal directory not found" -ForegroundColor Red
            exit 1
          }

          # Check if executable exists
          if (!(Test-Path "test_bp_estimation_optimal/bin/Release/net6.0/BloodPressureTestOptimal.exe")) {
            Write-Host "ERROR: BloodPressureTestOptimal.exe not found" -ForegroundColor Red
            Write-Host "This means the build step failed" -ForegroundColor Red
            exit 1
          }

          cd test_bp_estimation_optimal

          # Set environment variables
          $env:TEST_VIDEO = "${{ env.TEST_VIDEO }}"
          $env:TEST_DURATION = "${{ env.TEST_DURATION }}"
          $env:PERFORMANCE_MONITORING = "${{ env.PERFORMANCE_MONITORING }}"

          # Create results directory
          New-Item -ItemType Directory -Path "results" -Force | Out-Null

          Write-Host "Test video: $env:TEST_VIDEO" -ForegroundColor Cyan
          Write-Host "Test duration: $env:TEST_DURATION seconds" -ForegroundColor Cyan
          Write-Host "Performance monitoring: $env:PERFORMANCE_MONITORING" -ForegroundColor Cyan

          # Check if test video exists
          $videoPath = Path.Combine("..", "sample-data", $env:TEST_VIDEO)
          if (!(Test-Path $videoPath)) {
            Write-Host "ERROR: Test video not found: $videoPath" -ForegroundColor Red
            Write-Host "Available files in sample-data:" -ForegroundColor Red
            if (Test-Path "..\sample-data") {
              Get-ChildItem "..\sample-data" -Name
            } else {
              Write-Host "sample-data directory does not exist" -ForegroundColor Red
            }
            exit 1
          }

          Write-Host "Test video found: $videoPath" -ForegroundColor Green

          # Run test with output capture
          Write-Host "Starting blood pressure estimation test..." -ForegroundColor Yellow
          $output = dotnet run -c Release 2>&1
          $exitCode = $LASTEXITCODE

          # Save output to file
          $output | Out-File -FilePath "results/optimal_test_output.txt" -Encoding UTF8

          # Display output
          Write-Host "=== OPTIMAL TEST OUTPUT ===" -ForegroundColor Green
          $output

          if ($exitCode -ne 0) {
            Write-Host "ERROR: Optimal test failed with exit code $exitCode" -ForegroundColor Red
            Write-Host "Check the output above for error details" -ForegroundColor Red
            exit 1
          }

          Write-Host "Optimal test completed successfully" -ForegroundColor Green
        shell: powershell

      - name: Analyze optimal test results
        run: |
          Write-Host "Analyzing optimal test results..." -ForegroundColor Yellow

          # Check if test directory exists
          if (!(Test-Path "test_bp_estimation_optimal")) {
            Write-Host "ERROR: test_bp_estimation_optimal directory not found" -ForegroundColor Red
            exit 1
          }

          cd test_bp_estimation_optimal

          if (Test-Path "results/optimal_test_output.txt") {
            Write-Host "=== OPTIMAL TEST RESULTS ANALYSIS ===" -ForegroundColor Green
            
            $output = Get-Content "results/optimal_test_output.txt" -Raw
            
            # Extract key metrics
            $systolic = [regex]::Match($output, "Systolic Blood Pressure: ([\d.]+)").Groups[1].Value
            $diastolic = [regex]::Match($output, "Diastolic Blood Pressure: ([\d.]+)").Groups[1].Value
            $confidence = [regex]::Match($output, "Confidence: ([\d.]+)").Groups[1].Value
            $totalTime = [regex]::Match($output, "Total Time: ([\d.]+)").Groups[1].Value
            $fps = [regex]::Match($output, "Frames Per Second: ([\d.]+)").Groups[1].Value
            $memoryUsed = [regex]::Match($output, "Memory Usage: ([\d.]+)").Groups[1].Value
            $cpuUsage = [regex]::Match($output, "CPU Usage: ([\d.]+)").Groups[1].Value
            
            Write-Host "Optimal Blood Pressure Results:" -ForegroundColor Yellow
            Write-Host "  Systolic: ${systolic} mmHg" -ForegroundColor Cyan
            Write-Host "  Diastolic: ${diastolic} mmHg" -ForegroundColor Cyan
            Write-Host "  Confidence: ${confidence}" -ForegroundColor Cyan
            Write-Host ""
            Write-Host "Optimal Performance Metrics:" -ForegroundColor Yellow
            Write-Host "  Total Time: ${totalTime} seconds" -ForegroundColor Cyan
            Write-Host "  FPS: ${fps}" -ForegroundColor Cyan
            Write-Host "  Memory Usage: ${memoryUsed} MB" -ForegroundColor Cyan
            Write-Host "  CPU Usage: ${cpuUsage}%" -ForegroundColor Cyan
            
            # Optimal benefits assessment
            Write-Host ""
            Write-Host "Optimal Benefits Assessment:" -ForegroundColor Yellow
            
            if ($memoryUsed -and [double]$memoryUsed -le 800) {
              Write-Host "  Lower memory usage (≤800MB) - optimal benefit" -ForegroundColor Green
            } elseif ($memoryUsed) {
              Write-Host "  Memory usage could be lower" -ForegroundColor Yellow
            }
            
            if ($totalTime -and [double]$totalTime -le 25) {
              Write-Host "  Faster processing (≤25s) - optimal benefit" -ForegroundColor Green
            } elseif ($totalTime) {
              Write-Host "  Processing time could be faster" -ForegroundColor Yellow
            }
            
            if ($confidence -and [double]$confidence -ge 0.7) {
              Write-Host "  High confidence level (≥0.7) - optimal accuracy" -ForegroundColor Green
            } elseif ($confidence) {
              Write-Host "  Confidence level could be higher" -ForegroundColor Yellow
            }
            
            # Blood pressure validation
            Write-Host ""
            Write-Host "Blood Pressure Validation (Optimal):" -ForegroundColor Yellow
            
            if ($systolic -and [double]$systolic -ge 80 -and [double]$systolic -le 200) {
              Write-Host "  Systolic pressure is within normal range (80-200 mmHg)" -ForegroundColor Green
            } elseif ($systolic) {
              Write-Host "  Systolic pressure is outside normal range" -ForegroundColor Yellow
            }
            
            if ($diastolic -and [double]$diastolic -ge 40 -and [double]$diastolic -le 120) {
              Write-Host "  Diastolic pressure is within normal range (40-120 mmHg)" -ForegroundColor Green
            } elseif ($diastolic) {
              Write-Host "  Diastolic pressure is outside normal range" -ForegroundColor Yellow
            }
            
            # Configuration assessment
            Write-Host ""
            Write-Host "Optimal Configuration Assessment:" -ForegroundColor Yellow
            Write-Host "  dlib frontal face detector (high accuracy)" -ForegroundColor Green
            Write-Host "  OpenCV DNN face detection (fast processing)" -ForegroundColor Green
            Write-Host "  No shape predictor (~100MB saved)" -ForegroundColor Green
            Write-Host "  Best balance of accuracy and performance" -ForegroundColor Green
            
          } else {
            Write-Host "ERROR: optimal_test_output.txt not found" -ForegroundColor Red
            Write-Host "This means the test execution failed" -ForegroundColor Red
            Write-Host "Available files in results directory:" -ForegroundColor Red
            if (Test-Path "results") {
              Get-ChildItem "results" -Name
            } else {
              Write-Host "results directory does not exist" -ForegroundColor Red
            }
            exit 1
          }
        shell: powershell

      - name: Upload optimal test results
        uses: actions/upload-artifact@v4
        with:
          name: blood-pressure-test-results-optimal-${{ github.sha }}
          path: test_bp_estimation_optimal/results/
          retention-days: 30
          if-no-files-found: error

      - name: Upload optimal test application
        uses: actions/upload-artifact@v4
        with:
          name: blood-pressure-test-app-optimal-${{ github.sha }}
          path: test_bp_estimation_optimal/bin/Release/net6.0/
          retention-days: 30
          if-no-files-found: error

      - name: Generate optimal test report
        run: |
          Write-Host "=== OPTIMAL BLOOD PRESSURE ESTIMATION TEST REPORT ===" -ForegroundColor Green
          Write-Host "Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Cyan
          Write-Host "Commit: ${{ github.sha }}" -ForegroundColor Cyan
          Write-Host "Test Video: ${{ env.TEST_VIDEO }}" -ForegroundColor Cyan
          Write-Host "Test Duration: ${{ env.TEST_DURATION }} seconds" -ForegroundColor Cyan
          Write-Host ""
          Write-Host "Optimal Configuration:" -ForegroundColor Yellow
          Write-Host "- dlib frontal face detector (high accuracy, low false positives)" -ForegroundColor Cyan
          Write-Host "- OpenCV DNN face detection (fast, GPU-accelerated)" -ForegroundColor Cyan
          Write-Host "- No shape predictor (~100MB saved)" -ForegroundColor Cyan
          Write-Host "- Best balance of accuracy and performance" -ForegroundColor Cyan
          Write-Host "- Robust face detection (dual approach)" -ForegroundColor Cyan
          Write-Host ""
          Write-Host "Test Status: COMPLETED" -ForegroundColor Green
          Write-Host ""
          Write-Host "Files Generated:" -ForegroundColor Yellow
          Write-Host "- Optimal test application: test_bp_estimation_optimal/bin/Release/net6.0/" -ForegroundColor Cyan
          Write-Host "- Optimal test results: test_bp_estimation_optimal/results/" -ForegroundColor Cyan
          Write-Host "- Performance logs: Available in artifacts" -ForegroundColor Cyan
          Write-Host ""
          Write-Host "Next Steps:" -ForegroundColor Yellow
          Write-Host "1. Download optimal test results artifact for detailed analysis" -ForegroundColor Cyan
          Write-Host "2. Compare with other versions if available" -ForegroundColor Cyan
          Write-Host "3. Deploy optimal version for production use" -ForegroundColor Cyan
          Write-Host "4. Monitor performance in real-world conditions" -ForegroundColor Cyan
        shell: powershell
