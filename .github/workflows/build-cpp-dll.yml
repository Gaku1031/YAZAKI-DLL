name: Build C++ Blood Pressure DLL

on:
  push:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Debug
      skip_mediapipe_build:
        description: "Skip MediaPipe build (for faster iteration)"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}

jobs:
  build-cpp-dll:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone libmediapipe
        run: |
          Write-Host "Cloning libmediapipe..." -ForegroundColor Yellow
          git clone --depth=1 https://github.com/cpvrlab/libmediapipe.git

          if (Test-Path "libmediapipe") {
            Write-Host "libmediapipe cloned successfully" -ForegroundColor Green
            Get-ChildItem "libmediapipe" | ForEach-Object {
              Write-Host "  $($_.Name)" -ForegroundColor Cyan
            }
          } else {
            Write-Host "Error: libmediapipe clone failed" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Check libmediapipe repository structure
        run: |
          Write-Host "Checking libmediapipe repository structure..." -ForegroundColor Yellow
          cd libmediapipe

          Write-Host "Root directory contents:" -ForegroundColor Cyan
          Get-ChildItem | ForEach-Object {
            Write-Host "  $($_.Name) ($($_.GetType().Name))" -ForegroundColor White
          }

          Write-Host "Checking for build scripts:" -ForegroundColor Cyan
          Get-ChildItem -Filter "*.ps1" | ForEach-Object {
            Write-Host "  Found script: $($_.Name)" -ForegroundColor Green
          }

          Write-Host "Checking for build directories:" -ForegroundColor Cyan
          if (Test-Path "output") {
            Write-Host "  Output directory exists" -ForegroundColor Green
            Get-ChildItem "output" -Recurse | ForEach-Object {
              Write-Host "    $($_.FullName)" -ForegroundColor White
            }
          } else {
            Write-Host "  Output directory does not exist yet" -ForegroundColor Yellow
          }

          Write-Host "Checking for CMake files:" -ForegroundColor Cyan
          Get-ChildItem -Filter "CMakeLists.txt" -Recurse | ForEach-Object {
            Write-Host "  Found CMakeLists.txt: $($_.FullName)" -ForegroundColor Green
          }

          Write-Host "Checking for Python build scripts:" -ForegroundColor Cyan
          Get-ChildItem -Filter "*.py" -Recurse | ForEach-Object {
            Write-Host "  Found Python script: $($_.FullName)" -ForegroundColor Green
          }

          Write-Host "Checking for README files:" -ForegroundColor Cyan
          Get-ChildItem -Filter "README*" -Recurse | ForEach-Object {
            Write-Host "  Found README: $($_.FullName)" -ForegroundColor Green
            Write-Host "  Content preview:" -ForegroundColor Yellow
            Get-Content $_.FullName -Head 20 | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
          }
        shell: powershell

      - name: Install OpenCV (Pre-built)
        run: |
          Write-Host "Installing OpenCV from pre-built binaries..." -ForegroundColor Yellow
          $opencvVersion = "4.7.0"
          $opencvUrl = "https://github.com/opencv/opencv/releases/download/$opencvVersion/opencv-$opencvVersion-windows.exe"
          $opencvExe = "opencv-$opencvVersion-windows.exe"
          $opencvDir = "${{ github.workspace }}/opencv"
          Write-Host "Downloading OpenCV v$opencvVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $opencvUrl -OutFile $opencvExe
          Write-Host "Extracting OpenCV with 7-Zip..." -ForegroundColor Yellow
          $sevenZipUrl = "https://www.7-zip.org/a/7z2301-x64.exe"
          $sevenZipExe = "7z-installer.exe"
          Invoke-WebRequest -Uri $sevenZipUrl -OutFile $sevenZipExe
          Start-Process -FilePath $sevenZipExe -ArgumentList "/S" -Wait -NoNewWindow
          $sevenZipPath = "C:\Program Files\7-Zip\7z.exe"
          if (Test-Path $sevenZipPath) {
            & "$sevenZipPath" x $opencvExe "-o$opencvDir" -y
          } else {
            Write-Host "Error: Could not extract OpenCV (7-Zip not found)" -ForegroundColor Red
            exit 1
          }
          $buildPath1 = "$opencvDir/build"
          $buildPath2 = "$opencvDir/opencv/build"
          if (Test-Path $buildPath1) {
            $buildPath = $buildPath1
          } elseif (Test-Path $buildPath2) {
            $buildPath = $buildPath2
          } else {
            $buildPath = $null
          }
          if ($buildPath) {
            Write-Host "OpenCV extracted successfully" -ForegroundColor Green
          } else {
            Write-Host "Error: OpenCV build directory not found after extraction" -ForegroundColor Red
            exit 1
          }
          $env:OpenCV_DIR = $buildPath
          echo "OpenCV_DIR=${buildPath}" >> $env:GITHUB_ENV
          Write-Host "OpenCV installed successfully at: ${buildPath}" -ForegroundColor Green
        shell: powershell

      - name: Setup Python for libmediapipe
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: "x64"

      - name: Install Python dependencies for libmediapipe
        run: |
          Write-Host "Installing Python dependencies for libmediapipe..." -ForegroundColor Yellow
          python -m pip install --upgrade pip
          pip install numpy requests

          # Check if required packages are installed
          python -c "import numpy; print('NumPy version:', numpy.__version__)"
          python -c "import requests; print('Requests version:', requests.__version__)"

          # Check for required build tools
          Write-Host "Checking build tools..." -ForegroundColor Yellow

          # Check CMake
          try {
            $cmakeVersion = cmake --version
            Write-Host "CMake found: $cmakeVersion" -ForegroundColor Green
          } catch {
            Write-Host "Warning: CMake not found" -ForegroundColor Yellow
          }

          # Check Bazel
          try {
            $bazelVersion = bazel --version
            Write-Host "Bazel found: $bazelVersion" -ForegroundColor Green
          } catch {
            Write-Host "Warning: Bazel not found" -ForegroundColor Yellow
          }

          # Check Git
          try {
            $gitVersion = git --version
            Write-Host "Git found: $gitVersion" -ForegroundColor Green
          } catch {
            Write-Host "Warning: Git not found" -ForegroundColor Yellow
          }
        shell: powershell

      - name: Build libmediapipe (Windows)
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" &&
          cd libmediapipe &&
          powershell -ExecutionPolicy Bypass -File ./build-x86_64-windows.ps1 --version v0.8.11 --config release --opencv_dir "${{ env.OpenCV_DIR }}"

      - name: Verify libmediapipe build output
        run: |
          Write-Host "Verifying libmediapipe build output..." -ForegroundColor Yellow

          $outputDir = "${{ github.workspace }}/libmediapipe/output"
          if (Test-Path $outputDir) {
            Write-Host "libmediapipe output directory found: $outputDir" -ForegroundColor Green
            Get-ChildItem $outputDir -Recurse -Directory | ForEach-Object {
              Write-Host "  Directory: $($_.FullName)" -ForegroundColor Cyan
            }
            Get-ChildItem $outputDir -Recurse -File -Include "*.lib", "*.dll", "*.h" | ForEach-Object {
              Write-Host "  File: $($_.FullName)" -ForegroundColor Cyan
            }
          } else {
            Write-Host "Warning: libmediapipe output directory not found, attempting to download pre-built version..." -ForegroundColor Yellow
            
            # libmediapipeの利用可能なリリースを確認
            Write-Host "Checking available libmediapipe releases..." -ForegroundColor Yellow
            try {
              $releasesUrl = "https://api.github.com/repos/cpvrlab/libmediapipe/releases"
              $releases = Invoke-RestMethod -Uri $releasesUrl
              Write-Host "Available releases:" -ForegroundColor Cyan
              foreach ($release in $releases) {
                Write-Host "  $($release.tag_name)" -ForegroundColor White
              }
            } catch {
              Write-Host "Could not fetch releases: $($_.Exception.Message)" -ForegroundColor Yellow
            }
            
            # 事前にビルドされたlibmediapipeをダウンロード（複数のURLを試行）
            $prebuiltUrls = @(
              "https://github.com/cpvrlab/libmediapipe/releases/download/v0.8.11/libmediapipe-0.8.11-x86_64-windows.zip",
              "https://github.com/cpvrlab/libmediapipe/releases/download/v0.8.11/libmediapipe-windows-x64.zip",
              "https://github.com/cpvrlab/libmediapipe/releases/download/v0.8.11/windows-x64.zip"
            )
            
            $prebuiltZip = "libmediapipe-prebuilt.zip"
            $prebuiltDir = "${{ github.workspace }}/libmediapipe/output"
            $downloadSuccess = $false
            
            foreach ($prebuiltUrl in $prebuiltUrls) {
              try {
                Write-Host "Trying to download from: $prebuiltUrl" -ForegroundColor Yellow
                Invoke-WebRequest -Uri $prebuiltUrl -OutFile $prebuiltZip
                Write-Host "Download successful from: $prebuiltUrl" -ForegroundColor Green
                $downloadSuccess = $true
                break
              } catch {
                Write-Host "Failed to download from $prebuiltUrl : $($_.Exception.Message)" -ForegroundColor Yellow
                continue
              }
            }
            
            if ($downloadSuccess) {
              try {
                Write-Host "Extracting pre-built libmediapipe..." -ForegroundColor Yellow
                New-Item -ItemType Directory -Path $prebuiltDir -Force | Out-Null
                Expand-Archive -Path $prebuiltZip -DestinationPath $prebuiltDir -Force
                
                Write-Host "Pre-built libmediapipe installed successfully" -ForegroundColor Green
              } catch {
                Write-Host "Error: Failed to extract pre-built libmediapipe" -ForegroundColor Red
                Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
                exit 1
              }
            } else {
              Write-Host "Error: All download attempts failed" -ForegroundColor Red
              Write-Host "Attempting to build libmediapipe manually..." -ForegroundColor Yellow
              
              # 手動ビルドの代替手段
              cd "${{ github.workspace }}/libmediapipe"
              
              Write-Host "Current directory: $(Get-Location)" -ForegroundColor Cyan
              Write-Host "Available files:" -ForegroundColor Cyan
              Get-ChildItem | ForEach-Object {
                Write-Host "  $($_.Name)" -ForegroundColor White
              }
              
              # 必要なファイルが存在するか確認
              if (Test-Path "CMakeLists.txt") {
                Write-Host "CMakeLists.txt found, attempting manual build..." -ForegroundColor Green
                
                # 手動でCMakeビルドを実行
                New-Item -ItemType Directory -Path "build" -Force | Out-Null
                cd build
                
                cmake .. -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="${{ github.workspace }}/opencv/opencv/build/x64/vc16/lib"
                if ($LASTEXITCODE -eq 0) {
                  cmake --build . --config Release
                  if ($LASTEXITCODE -eq 0) {
                    Write-Host "Manual build completed successfully" -ForegroundColor Green
                  } else {
                    Write-Host "Manual build failed" -ForegroundColor Red
                    exit 1
                  }
                } else {
                  Write-Host "CMake configuration failed" -ForegroundColor Red
                  exit 1
                }
              } elseif (Test-Path "setup.py") {
                Write-Host "setup.py found, attempting Python build..." -ForegroundColor Green
                python setup.py build
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "Python build completed successfully" -ForegroundColor Green
                } else {
                  Write-Host "Python build failed" -ForegroundColor Red
                  exit 1
                }
              } elseif (Test-Path "build.py") {
                Write-Host "build.py found, attempting Python build script..." -ForegroundColor Green
                python build.py
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "Python build script completed successfully" -ForegroundColor Green
                } else {
                  Write-Host "Python build script failed" -ForegroundColor Red
                  exit 1
                }
              } else {
                Write-Host "Error: No build files found (CMakeLists.txt, setup.py, or build.py)" -ForegroundColor Red
                Write-Host "Available files in libmediapipe directory:" -ForegroundColor Yellow
                Get-ChildItem -Recurse | ForEach-Object {
                  Write-Host "  $($_.FullName)" -ForegroundColor White
                }
                
                # MediaPipeを直接使用する代替手段を試行
                Write-Host "Attempting to use MediaPipe directly..." -ForegroundColor Yellow
                cd "${{ github.workspace }}"
                
                if (Test-Path "mediapipe") {
                  Write-Host "MediaPipe directory found, checking for bazel-bin..." -ForegroundColor Green
                  if (Test-Path "mediapipe/bazel-bin") {
                    Write-Host "MediaPipe bazel-bin found, creating output directory..." -ForegroundColor Green
                    New-Item -ItemType Directory -Path "libmediapipe/output" -Force | Out-Null
                    Write-Host "Created libmediapipe output directory for MediaPipe integration" -ForegroundColor Green
                  } else {
                    Write-Host "MediaPipe bazel-bin not found, attempting to build MediaPipe..." -ForegroundColor Yellow
                    cd mediapipe
                    if (Test-Path "WORKSPACE") {
                      Write-Host "MediaPipe WORKSPACE found, attempting Bazel build..." -ForegroundColor Green
                      # Bazelビルドを試行
                      bazel build //mediapipe/framework:mediapipe_framework
                      if ($LASTEXITCODE -eq 0) {
                        Write-Host "MediaPipe Bazel build completed successfully" -ForegroundColor Green
                      } else {
                        Write-Host "MediaPipe Bazel build failed" -ForegroundColor Red
                        exit 1
                      }
                    } else {
                      Write-Host "Error: MediaPipe WORKSPACE not found" -ForegroundColor Red
                      exit 1
                    }
                  }
                } else {
                  Write-Host "Error: Neither libmediapipe nor MediaPipe found" -ForegroundColor Red
                  exit 1
                }
              }
            }
        shell: powershell

      - name: Create OpenCV symlink for MediaPipe
        run: |
          # buildディレクトリのパスを両方チェック
          $opencvTarget1 = "${{ github.workspace }}\opencv\build"
          $opencvTarget2 = "${{ github.workspace }}\opencv\opencv\build"
          if (Test-Path $opencvTarget1) {
            $opencvTarget = $opencvTarget1
          } elseif (Test-Path $opencvTarget2) {
            $opencvTarget = $opencvTarget2
          } else {
            $opencvTarget = $null
          }

          Write-Host "Creating OpenCV symlink for MediaPipe..." -ForegroundColor Yellow
          Write-Host "Target path: ${opencvTarget}" -ForegroundColor Cyan

          # ターゲットパスの存在確認
          if (-not $opencvTarget) {
            Write-Host "Error: OpenCV build directory does not exist at either expected location." -ForegroundColor Red
            Write-Host "Available paths:" -ForegroundColor Yellow
            $baseDir = "${{ github.workspace }}\opencv"
            if (Test-Path $baseDir) {
              Get-ChildItem $baseDir -Recurse -Directory -Depth 2 | ForEach-Object { 
                Write-Host "  $($_.FullName)" 
              }
            }
            exit 1
          }

          # C:\opencvディレクトリを作成
          if (!(Test-Path "C:\opencv")) {
            New-Item -ItemType Directory -Path "C:\opencv" -Force | Out-Null
            Write-Host "Created C:\opencv directory" -ForegroundColor Green
          }

          # ジャンクション作成
          if (!(Test-Path "C:\opencv\build")) {
            try {
              New-Item -ItemType Junction -Path "C:\opencv\build" -Target $opencvTarget -Force | Out-Null
              Write-Host "Created junction: C:\opencv\build -> ${opencvTarget}" -ForegroundColor Green
            } catch {
              Write-Host "Warning: Could not create junction, copying files instead..." -ForegroundColor Yellow
              Copy-Item -Path $opencvTarget -Destination "C:\opencv\build" -Recurse -Force
              Write-Host "Copied OpenCV build to C:\opencv\build" -ForegroundColor Green
            }
          } else {
            Write-Host "Junction already exists: C:\opencv\build" -ForegroundColor Cyan
          }

          # 最終確認
          if (Test-Path "C:\opencv\build") {
            Write-Host "OpenCV symlink created successfully" -ForegroundColor Green
          } else {
            Write-Host "Error: Failed to create OpenCV symlink" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Install ONNX Runtime
        run: |
          # Download and install ONNX Runtime
          $onnxVersion = "1.16.3"
          $onnxUrl = "https://github.com/microsoft/onnxruntime/releases/download/v$onnxVersion/onnxruntime-win-x64-$onnxVersion.zip"
          $onnxZip = "onnxruntime.zip"
          $onnxDir = "${{ github.workspace }}/onnxruntime"

          Write-Host "Downloading ONNX Runtime v$onnxVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $onnxUrl -OutFile $onnxZip

          Write-Host "Extracting ONNX Runtime..." -ForegroundColor Yellow
          Expand-Archive -Path $onnxZip -DestinationPath $onnxDir -Force

          # Set environment variables for CMake
          $env:ONNXRUNTIME_ROOT = $onnxDir
          $env:ONNXRUNTIME_INCLUDE_DIR = "$onnxDir/include"
          $env:ONNXRUNTIME_LIB_DIR = "$onnxDir/lib"

          # Verify installation
          Write-Host "Verifying ONNX Runtime installation..." -ForegroundColor Yellow
          if (Test-Path "$onnxDir/include/onnxruntime_cxx_api.h") {
            Write-Host "ONNX Runtime headers found" -ForegroundColor Green
          } else {
            Write-Host "Error: ONNX Runtime headers not found" -ForegroundColor Red
            exit 1
          }

          if (Test-Path "$onnxDir/lib/onnxruntime.lib") {
            Write-Host "ONNX Runtime library found" -ForegroundColor Green
          } else {
            Write-Host "Error: ONNX Runtime library not found" -ForegroundColor Red
            exit 1
          }

          Write-Host "ONNX Runtime installed successfully" -ForegroundColor Green
        shell: powershell

      - name: Install vcpkg and ZLIB
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install zlib:x64-windows
        shell: powershell

      - name: Setup MediaPipe with Bazel
        run: |
          Write-Host "Setting up MediaPipe with Bazel..." -ForegroundColor Yellow

          # Clone MediaPipe repository
          git clone --depth=1 https://github.com/google/mediapipe.git
          cd mediapipe

          # Install Bazel for Windows
          $bazelVersion = "6.5.0"
          $bazelUrl = "https://github.com/bazelbuild/bazel/releases/download/$bazelVersion/bazel-$bazelVersion-windows-x86_64.exe"
          $bazelExe = "bazel.exe"

          Write-Host "Downloading Bazel v$bazelVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $bazelUrl -OutFile $bazelExe

          # Set environment variables for proper Visual Studio detection
          $env:BAZEL_VS = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $env:BAZEL_VC = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC"
          $env:BAZEL_PYTHON = "C:\hostedtoolcache\windows\Python\3.11.10\x64\python.exe"

          Write-Host "Bazel setup completed" -ForegroundColor Green
        shell: powershell

      - name: Fix MediaPipe OpenCV Configuration
        run: |
          cd mediapipe
          Write-Host "Fixing MediaPipe OpenCV configuration..." -ForegroundColor Yellow

          $workspaceContent = @"
          workspace(name = "mediapipe")

          load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

          # OpenCV for Windows
          new_local_repository(
              name = "windows_opencv",
              build_file_content = """
          package(default_visibility = ["//visibility:public"])

          cc_library(
              name = "opencv",
              srcs = ["build/x64/vc16/lib/opencv_world480.lib"],
              hdrs = glob([
                  "build/include/**/*.h",
                  "build/include/**/*.hpp",
              ]),
              includes = ["build/include"],
              linkopts = ["opencv_world480.lib"],
          )
          """,
              path = "${{ github.workspace }}/opencv",
          )

          # Essential dependencies
          http_archive(
              name = "com_google_protobuf",
              strip_prefix = "protobuf-21.12",
              urls = ["https://github.com/protocolbuffers/protobuf/archive/v21.12.zip"],
          )

          http_archive(
              name = "com_google_absl",
              strip_prefix = "abseil-cpp-20220623.1",
              urls = ["https://github.com/abseil/absl-cpp/archive/20220623.1.zip"],
          )

          load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
          protobuf_deps()
          "@
          [System.IO.File]::WriteAllLines("WORKSPACE", $workspaceContent)
          Write-Host "MediaPipe OpenCV configuration fixed" -ForegroundColor Green
        shell: powershell

      - name: Configure CMake
        run: |
          cd CppBloodPressureDLL

          # libmediapipeの実際の出力パスを確認
          $libmediapipeOutput = "${{ github.workspace }}/libmediapipe/output"
          Write-Host "Checking libmediapipe output directory: $libmediapipeOutput" -ForegroundColor Yellow

          if (Test-Path $libmediapipeOutput) {
            Get-ChildItem $libmediapipeOutput -Recurse -Directory | ForEach-Object {
              Write-Host "Found directory: $($_.FullName)" -ForegroundColor Cyan
            }
          } else {
            Write-Host "libmediapipe output directory not found" -ForegroundColor Red
          }

          # ONNX Runtimeのパスを確認
          $onnxRuntimePath = "${{ github.workspace }}/onnxruntime"
          Write-Host "Checking ONNX Runtime path: $onnxRuntimePath" -ForegroundColor Yellow

          if (Test-Path $onnxRuntimePath) {
            Write-Host "ONNX Runtime found" -ForegroundColor Green
          } else {
            Write-Host "ONNX Runtime not found" -ForegroundColor Red
          }

          # CMake設定
          cmake -B build -S . `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DONNXRUNTIME_ROOT="${{ github.workspace }}/onnxruntime" `
            -DMEDIAPIPE_ROOT="${{ github.workspace }}/libmediapipe/output" `
            -DOpenCV_DIR="${{ github.workspace }}/opencv/opencv/build/x64/vc16/lib" `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        shell: powershell

      - name: Build DLL
        run: |
          cd CppBloodPressureDLL
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

          # Check if DLL was built successfully
          $dllPath = "build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            $size = [math]::Round((Get-Item $dllPath).Length / 1MB, 2)
            Write-Host "DLL built successfully: $dllPath ($size MB)" -ForegroundColor Green
            
            # Copy DLL to test directory
            Copy-Item $dllPath "test/" -Force
          } else {
            Write-Host "DLL build failed" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Build C# Test Application
        run: |
          cd CppBloodPressureDLL/test
          dotnet restore CSharpTest.csproj
          dotnet build CSharpTest.csproj -c ${{ env.BUILD_TYPE }} --no-restore

          if ($LASTEXITCODE -ne 0) {
            Write-Host "C# test build failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "C# test application built successfully" -ForegroundColor Green
        shell: powershell

      - name: Copy real sample video for testing
        run: |
          cd CppBloodPressureDLL/test

          # Copy the real sample video for testing
          if (Test-Path "../../sample-data/sample_1M.webm") {
            Copy-Item "../../sample-data/sample_1M.webm" "sample_video.webm" -Force
            $size = [math]::Round((Get-Item "sample_video.webm").Length / 1MB, 2)
            Write-Host "Real sample video copied for testing: sample_video.webm ($size MB)" -ForegroundColor Green
          } else {
            Write-Host "Warning: Real sample video not found, creating dummy video" -ForegroundColor Yellow
            "dummy video content for testing" | Out-File -FilePath "sample_video.webm" -Encoding UTF8
          }
        shell: powershell

      - name: Run C# Integration Test
        run: |
          cd CppBloodPressureDLL/test

          # Set up environment
          $env:PATH = "$PWD;" + $env:PATH

          # Run test
          dotnet run --project CSharpTest.csproj --no-build -c ${{ env.BUILD_TYPE }}

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Integration test failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "Integration test passed" -ForegroundColor Green
        shell: powershell

      - name: Package Distribution
        run: |
          Write-Host "Creating distribution package..." -ForegroundColor Yellow

          New-Item -ItemType Directory -Path "dist_cpp" -Force | Out-Null

          # Copy DLL
          $dllPath = "CppBloodPressureDLL/build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "CppBloodPressureDLL/build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            Copy-Item $dllPath "dist_cpp/" -Force
          }

          # Copy models
          Copy-Item "CppBloodPressureDLL/models" "dist_cpp/" -Recurse -Force

          # Copy test application
          Copy-Item "CppBloodPressureDLL/test/bin/${{ env.BUILD_TYPE }}/net6.0/*" "dist_cpp/" -Force

          # Copy required runtime libraries
          $vcpkgDir = "${{ github.workspace }}/vcpkg/installed/x64-windows"
          if (Test-Path "$vcpkgDir/bin") {
            Get-ChildItem "$vcpkgDir/bin/*.dll" | ForEach-Object {
              Copy-Item $_.FullName "dist_cpp/" -Force
            }
          }

          # Calculate size
          $totalSize = (Get-ChildItem -Path "dist_cpp" -Recurse -File | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          Write-Host "Distribution package created: $sizeMB MB" -ForegroundColor Green
        shell: powershell

      - name: Upload Distribution Package
        uses: actions/upload-artifact@v4
        with:
          name: BloodPressureDLL-Cpp-${{ env.BUILD_TYPE }}-${{ github.sha }}
          path: dist_cpp/
          retention-days: 30

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            CppBloodPressureDLL/build/
            *.log
          retention-days: 7
