name: Build C++ Blood Pressure DLL

on:
  push:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Debug
      skip_mediapipe_build:
        description: "Skip MediaPipe build (for faster iteration)"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}

jobs:
  build-cpp-dll:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python for model conversion
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install Python dependencies for model conversion
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn numpy joblib onnx skl2onnx onnxruntime
        shell: powershell

      - name: Convert models to ONNX
        run: |
          cd CppBloodPressureDLL/models
          python convert_to_onnx.py
          if (!(Test-Path "model_sbp.onnx") -or !(Test-Path "model_dbp.onnx")) {
            Write-Host "Model conversion failed" -ForegroundColor Red
            exit 1
          }
          Write-Host "Models converted successfully" -ForegroundColor Green
        shell: powershell

      - name: Install OpenCV (Pre-built)
        run: |
          Write-Host "Installing OpenCV from pre-built binaries..." -ForegroundColor Yellow

          # OpenCV公式のWindows向けプリビルドを使用
          $opencvVersion = "4.8.0"
          $opencvUrl = "https://github.com/opencv/opencv/releases/download/$opencvVersion/opencv-$opencvVersion-windows.exe"
          $opencvExe = "opencv-$opencvVersion-windows.exe"
          $opencvDir = "${{ github.workspace }}/opencv"

          Write-Host "Downloading OpenCV v$opencvVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $opencvUrl -OutFile $opencvExe

          Write-Host "Extracting OpenCV with 7-Zip..." -ForegroundColor Yellow
          # 7-Zipをダウンロード
          $sevenZipUrl = "https://www.7-zip.org/a/7z2301-x64.exe"
          $sevenZipExe = "7z-installer.exe"
          Invoke-WebRequest -Uri $sevenZipUrl -OutFile $sevenZipExe
          # 7-Zipをサイレントインストール
          Start-Process -FilePath $sevenZipExe -ArgumentList "/S" -Wait -NoNewWindow
          # 7-ZipでOpenCVを解凍
          $sevenZipPath = "C:\Program Files\7-Zip\7z.exe"
          if (Test-Path $sevenZipPath) {
            & "$sevenZipPath" x $opencvExe "-o$opencvDir" -y
          } else {
            Write-Host "Error: Could not extract OpenCV (7-Zip not found)" -ForegroundColor Red
            exit 1
          }

          # buildディレクトリのパスを両方チェック
          $buildPath1 = "$opencvDir/build"
          $buildPath2 = "$opencvDir/opencv/build"
          if (Test-Path $buildPath1) {
            $buildPath = $buildPath1
          } elseif (Test-Path $buildPath2) {
            $buildPath = $buildPath2
          } else {
            $buildPath = $null
          }

          if ($buildPath) {
            Write-Host "OpenCV extracted successfully" -ForegroundColor Green
            Write-Host "Directory structure:" -ForegroundColor Cyan
            Get-ChildItem $buildPath -Directory | ForEach-Object { Write-Host "  $($_.Name)" }
            if (Test-Path "$buildPath/x64") {
              Get-ChildItem "$buildPath/x64" -Directory | ForEach-Object { Write-Host "    x64/$($_.Name)" }
            }
          } else {
            Write-Host "Error: OpenCV build directory not found after extraction" -ForegroundColor Red
            Write-Host "Available directories in ${opencvDir}:" -ForegroundColor Yellow
            if (Test-Path ${opencvDir}) {
              Get-ChildItem ${opencvDir} | ForEach-Object { Write-Host "  $($_.Name)" }
            }
            exit 1
          }

          # 環境変数を設定
          $env:OpenCV_DIR = $buildPath
          $env:PATH = "$buildPath/x64/vc16/bin;$env:PATH"
          # CMakeで見つけられるように環境変数を永続化
          echo "OpenCV_DIR=${buildPath}" >> $env:GITHUB_ENV
          echo "${buildPath}/x64/vc16/bin" >> $env:GITHUB_PATH
          Write-Host "OpenCV installed successfully at: ${buildPath}" -ForegroundColor Green
        shell: powershell

      - name: Create OpenCV symlink for MediaPipe
        run: |
          # buildディレクトリのパスを両方チェック
          $opencvTarget1 = "${{ github.workspace }}\opencv\build"
          $opencvTarget2 = "${{ github.workspace }}\opencv\opencv\build"
          if (Test-Path $opencvTarget1) {
            $opencvTarget = $opencvTarget1
          } elseif (Test-Path $opencvTarget2) {
            $opencvTarget = $opencvTarget2
          } else {
            $opencvTarget = $null
          }

          Write-Host "Creating OpenCV symlink for MediaPipe..." -ForegroundColor Yellow
          Write-Host "Target path: ${opencvTarget}" -ForegroundColor Cyan

          # ターゲットパスの存在確認
          if (-not $opencvTarget) {
            Write-Host "Error: OpenCV build directory does not exist at either expected location." -ForegroundColor Red
            Write-Host "Available paths:" -ForegroundColor Yellow
            $baseDir = "${{ github.workspace }}\opencv"
            if (Test-Path $baseDir) {
              Get-ChildItem $baseDir -Recurse -Directory -Depth 2 | ForEach-Object { 
                Write-Host "  $($_.FullName)" 
              }
            }
            exit 1
          }

          # C:\opencvディレクトリを作成
          if (!(Test-Path "C:\opencv")) {
            New-Item -ItemType Directory -Path "C:\opencv" -Force | Out-Null
            Write-Host "Created C:\opencv directory" -ForegroundColor Green
          }

          # ジャンクション作成
          if (!(Test-Path "C:\opencv\build")) {
            try {
              New-Item -ItemType Junction -Path "C:\opencv\build" -Target $opencvTarget -Force | Out-Null
              Write-Host "Created junction: C:\opencv\build -> ${opencvTarget}" -ForegroundColor Green
            } catch {
              Write-Host "Warning: Could not create junction, copying files instead..." -ForegroundColor Yellow
              Copy-Item -Path $opencvTarget -Destination "C:\opencv\build" -Recurse -Force
              Write-Host "Copied OpenCV build to C:\opencv\build" -ForegroundColor Green
            }
          } else {
            Write-Host "Junction already exists: C:\opencv\build" -ForegroundColor Cyan
          }

          # 最終確認
          if (Test-Path "C:\opencv\build") {
            Write-Host "OpenCV symlink created successfully" -ForegroundColor Green
          } else {
            Write-Host "Error: Failed to create OpenCV symlink" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Install ONNX Runtime
        run: |
          # Download and install ONNX Runtime
          $onnxVersion = "1.16.3"
          $onnxUrl = "https://github.com/microsoft/onnxruntime/releases/download/v$onnxVersion/onnxruntime-win-x64-$onnxVersion.zip"
          $onnxZip = "onnxruntime.zip"
          $onnxDir = "${{ github.workspace }}/onnxruntime"

          Write-Host "Downloading ONNX Runtime v$onnxVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $onnxUrl -OutFile $onnxZip

          Write-Host "Extracting ONNX Runtime..." -ForegroundColor Yellow
          Expand-Archive -Path $onnxZip -DestinationPath $onnxDir -Force

          # Set environment variables for CMake
          $env:ONNXRUNTIME_ROOT = $onnxDir
          $env:ONNXRUNTIME_INCLUDE_DIR = "$onnxDir/include"
          $env:ONNXRUNTIME_LIB_DIR = "$onnxDir/lib"

          Write-Host "ONNX Runtime installed successfully" -ForegroundColor Green
        shell: powershell

      - name: Setup MediaPipe with Bazel
        run: |
          Write-Host "Setting up MediaPipe with Bazel..." -ForegroundColor Yellow

          # Clone MediaPipe repository
          git clone --depth=1 https://github.com/google/mediapipe.git
          cd mediapipe

          # Install Bazel for Windows
          $bazelVersion = "6.5.0"
          $bazelUrl = "https://github.com/bazelbuild/bazel/releases/download/$bazelVersion/bazel-$bazelVersion-windows-x86_64.exe"
          $bazelExe = "bazel.exe"

          Write-Host "Downloading Bazel v$bazelVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $bazelUrl -OutFile $bazelExe

          # Set environment variables for proper Visual Studio detection
          $env:BAZEL_VS = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $env:BAZEL_VC = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC"
          $env:BAZEL_PYTHON = "C:\hostedtoolcache\windows\Python\3.11.10\x64\python.exe"

          Write-Host "Bazel setup completed" -ForegroundColor Green
        shell: powershell

      - name: Fix MediaPipe OpenCV Configuration
        run: |
          cd mediapipe
          Write-Host "Fixing MediaPipe OpenCV configuration..." -ForegroundColor Yellow

          # Create proper WORKSPACE configuration for OpenCV (no select, always Release lib)
          $workspaceContent = @"
          workspace(name = "mediapipe")

          load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

          # OpenCV for Windows
          new_local_repository(
              name = "windows_opencv",
              build_file_content = """
          package(default_visibility = ["//visibility:public"])

          cc_library(
              name = "opencv",
              srcs = ["build/x64/vc16/lib/opencv_world480.lib"],
              hdrs = glob([
                  "build/include/**/*.h",
                  "build/include/**/*.hpp",
              ]),
              includes = ["build/include"],
              linkopts = ["opencv_world480.lib"],
          )
          """,
              path = "${{ github.workspace }}/opencv",
          )

          # Essential dependencies
          http_archive(
              name = "com_google_protobuf",
              strip_prefix = "protobuf-21.12",
              urls = ["https://github.com/protocolbuffers/protobuf/archive/v21.12.zip"],
          )

          http_archive(
              name = "com_google_absl",
              strip_prefix = "abseil-cpp-20220623.1",
              urls = ["https://github.com/abseil/absl-cpp/archive/20220623.1.zip"],
          )

          load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
          protobuf_deps()
          "@

          # Replace WORKSPACE file
          $workspaceContent | Out-File -FilePath "WORKSPACE" -Encoding UTF8
          Write-Host "MediaPipe OpenCV configuration fixed" -ForegroundColor Green
        shell: powershell

      - name: Build MediaPipe C++ Libraries
        if: ${{ github.event.inputs.skip_mediapipe_build != 'true' }}
        run: |
          cd mediapipe

          Write-Host "Building MediaPipe C++ libraries..." -ForegroundColor Yellow

          # Build with improved configuration
          .\bazel.exe build --cxxopt=/std:c++17 --define MEDIAPIPE_DISABLE_GPU=1 --action_env=BAZEL_CXXOPTS="-std=c++17" //mediapipe/framework:calculator_framework
          .\bazel.exe build --cxxopt=/std:c++17 --define MEDIAPIPE_DISABLE_GPU=1 --action_env=BAZEL_CXXOPTS="-std=c++17" //mediapipe/modules/face_landmark:face_landmark_front_cpu
          .\bazel.exe build --cxxopt=/std:c++17 --define MEDIAPIPE_DISABLE_GPU=1 --action_env=BAZEL_CXXOPTS="-std=c++17" //mediapipe/framework/formats:image_frame
          .\bazel.exe build --cxxopt=/std:c++17 --define MEDIAPIPE_DISABLE_GPU=1 --action_env=BAZEL_CXXOPTS="-std=c++17" //mediapipe/framework/formats:image_frame_opencv

          Write-Host "MediaPipe libraries built successfully" -ForegroundColor Green
        shell: powershell

      - name: Prepare MediaPipe for CMake
        run: |
          Write-Host "Preparing MediaPipe for CMake integration..." -ForegroundColor Yellow

          # Create MediaPipe build directory structure
          $mediapipeDir = "${{ github.workspace }}/mediapipe_build"
          New-Item -ItemType Directory -Path $mediapipeDir -Force | Out-Null
          New-Item -ItemType Directory -Path "$mediapipeDir/include" -Force | Out-Null
          New-Item -ItemType Directory -Path "$mediapipeDir/lib" -Force | Out-Null

          # Copy MediaPipe headers
          Copy-Item -Path "mediapipe/mediapipe/framework/*.h" -Destination "$mediapipeDir/include/" -Recurse -Force
          Copy-Item -Path "mediapipe/mediapipe/framework/formats/*.h" -Destination "$mediapipeDir/include/formats/" -Recurse -Force
          Copy-Item -Path "mediapipe/mediapipe/modules/face_landmark/*.h" -Destination "$mediapipeDir/include/face_landmark/" -Recurse -Force

          # Copy built libraries (they might be in different locations)
          $bazelBin = "mediapipe/bazel-bin"
          if (Test-Path "$bazelBin/mediapipe/framework") {
              Copy-Item -Path "$bazelBin/mediapipe/framework/*.lib" -Destination "$mediapipeDir/lib/" -Force
          }
          if (Test-Path "$bazelBin/mediapipe/modules/face_landmark") {
              Copy-Item -Path "$bazelBin/mediapipe/modules/face_landmark/*.lib" -Destination "$mediapipeDir/lib/" -Force
          }

          # Set environment variables for CMake
          $env:MEDIAPIPE_ROOT = $mediapipeDir
          $env:MEDIAPIPE_INCLUDE_DIR = "$mediapipeDir/include"
          $env:MEDIAPIPE_LIB_DIR = "$mediapipeDir/lib"

          Write-Host "MediaPipe prepared for CMake at: $mediapipeDir" -ForegroundColor Green
        shell: powershell

      - name: Configure CMake
        run: |
          cd CppBloodPressureDLL
          # vcpkgツールチェーンファイルを削除
          cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DONNXRUNTIME_ROOT=${{ github.workspace }}/onnxruntime -DMEDIAPIPE_ROOT=${{ github.workspace }}/mediapipe_build -DOpenCV_DIR=${{ github.workspace }}/opencv/build
        shell: powershell

      - name: Build DLL
        run: |
          cd CppBloodPressureDLL
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

          # Check if DLL was built successfully
          $dllPath = "build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            $size = [math]::Round((Get-Item $dllPath).Length / 1MB, 2)
            Write-Host "DLL built successfully: $dllPath ($size MB)" -ForegroundColor Green
            
            # Copy DLL to test directory
            Copy-Item $dllPath "test/" -Force
          } else {
            Write-Host "DLL build failed" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Build C# Test Application
        run: |
          cd CppBloodPressureDLL/test
          dotnet restore CSharpTest.csproj
          dotnet build CSharpTest.csproj -c ${{ env.BUILD_TYPE }} --no-restore

          if ($LASTEXITCODE -ne 0) {
            Write-Host "C# test build failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "C# test application built successfully" -ForegroundColor Green
        shell: powershell

      - name: Copy real sample video for testing
        run: |
          cd CppBloodPressureDLL/test

          # Copy the real sample video for testing
          if (Test-Path "../../sample-data/sample_1M.webm") {
            Copy-Item "../../sample-data/sample_1M.webm" "sample_video.webm" -Force
            $size = [math]::Round((Get-Item "sample_video.webm").Length / 1MB, 2)
            Write-Host "Real sample video copied for testing: sample_video.webm ($size MB)" -ForegroundColor Green
          } else {
            Write-Host "Warning: Real sample video not found, creating dummy video" -ForegroundColor Yellow
            "dummy video content for testing" | Out-File -FilePath "sample_video.webm" -Encoding UTF8
          }
        shell: powershell

      - name: Run C# Integration Test
        run: |
          cd CppBloodPressureDLL/test

          # Set up environment
          $env:PATH = "$PWD;" + $env:PATH

          # Run test
          dotnet run --project CSharpTest.csproj --no-build -c ${{ env.BUILD_TYPE }}

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Integration test failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "Integration test passed" -ForegroundColor Green
        shell: powershell

      - name: Package Distribution
        run: |
          Write-Host "Creating distribution package..." -ForegroundColor Yellow

          New-Item -ItemType Directory -Path "dist_cpp" -Force | Out-Null

          # Copy DLL
          $dllPath = "CppBloodPressureDLL/build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "CppBloodPressureDLL/build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            Copy-Item $dllPath "dist_cpp/" -Force
          }

          # Copy models
          Copy-Item "CppBloodPressureDLL/models" "dist_cpp/" -Recurse -Force

          # Copy test application
          Copy-Item "CppBloodPressureDLL/test/bin/${{ env.BUILD_TYPE }}/net6.0/*" "dist_cpp/" -Force

          # Copy required runtime libraries
          $vcpkgDir = "${{ github.workspace }}/vcpkg/installed/x64-windows"
          if (Test-Path "$vcpkgDir/bin") {
            Get-ChildItem "$vcpkgDir/bin/*.dll" | ForEach-Object {
              Copy-Item $_.FullName "dist_cpp/" -Force
            }
          }

          # Calculate size
          $totalSize = (Get-ChildItem -Path "dist_cpp" -Recurse -File | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          Write-Host "Distribution package created: $sizeMB MB" -ForegroundColor Green
        shell: powershell

      - name: Upload Distribution Package
        uses: actions/upload-artifact@v4
        with:
          name: BloodPressureDLL-Cpp-${{ env.BUILD_TYPE }}-${{ github.sha }}
          path: dist_cpp/
          retention-days: 30

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            CppBloodPressureDLL/build/
            *.log
          retention-days: 7
