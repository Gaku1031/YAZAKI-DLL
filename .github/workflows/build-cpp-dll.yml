name: Build C++ Blood Pressure DLL

on:
  push:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "CppBloodPressureDLL/**"
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Debug

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}

jobs:
  build-cpp-dll:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python for model conversion
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install Python dependencies for model conversion
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn numpy joblib onnx skl2onnx onnxruntime
        shell: powershell

      - name: Convert models to ONNX
        run: |
          cd CppBloodPressureDLL/models
          python convert_to_onnx.py
          if (!(Test-Path "model_sbp.onnx") -or !(Test-Path "model_dbp.onnx")) {
            Write-Host "Model conversion failed" -ForegroundColor Red
            exit 1
          }
          Write-Host "Models converted successfully" -ForegroundColor Green
        shell: powershell

      - name: Install OpenCV (Pre-built)
        run: |
          Write-Host "Installing OpenCV from pre-built binaries..." -ForegroundColor Yellow

          # OpenCV公式のWindows向けプリビルドを使用
          $opencvVersion = "4.8.0"
          $opencvUrl = "https://github.com/opencv/opencv/releases/download/$opencvVersion/opencv-$opencvVersion-windows.exe"
          $opencvExe = "opencv-$opencvVersion-windows.exe"
          $opencvDir = "${{ github.workspace }}/opencv"

          Write-Host "Downloading OpenCV v$opencvVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $opencvUrl -OutFile $opencvExe

          Write-Host "Extracting OpenCV..." -ForegroundColor Yellow
          # 7zipを使用して解凍
          Start-Process -FilePath $opencvExe -ArgumentList "-o$opencvDir", "-y" -Wait -NoNewWindow

          # 環境変数を設定
          $env:OpenCV_DIR = "$opencvDir/build"
          $env:PATH = "$opencvDir/build/x64/vc16/bin;$env:PATH"
          
          # CMakeで見つけられるように環境変数を永続化
          echo "OpenCV_DIR=$opencvDir/build" >> $env:GITHUB_ENV
          echo "$opencvDir/build/x64/vc16/bin" >> $env:GITHUB_PATH

          Write-Host "OpenCV installed successfully at: $opencvDir" -ForegroundColor Green
        shell: powershell

      - name: Install ONNX Runtime
        run: |
          # Download and install ONNX Runtime
          $onnxVersion = "1.16.3"
          $onnxUrl = "https://github.com/microsoft/onnxruntime/releases/download/v$onnxVersion/onnxruntime-win-x64-$onnxVersion.zip"
          $onnxZip = "onnxruntime.zip"
          $onnxDir = "${{ github.workspace }}/onnxruntime"

          Write-Host "Downloading ONNX Runtime v$onnxVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $onnxUrl -OutFile $onnxZip

          Write-Host "Extracting ONNX Runtime..." -ForegroundColor Yellow
          Expand-Archive -Path $onnxZip -DestinationPath $onnxDir -Force

          # Set environment variables for CMake
          $env:ONNXRUNTIME_ROOT = $onnxDir
          $env:ONNXRUNTIME_INCLUDE_DIR = "$onnxDir/include"
          $env:ONNXRUNTIME_LIB_DIR = "$onnxDir/lib"

          Write-Host "ONNX Runtime installed successfully" -ForegroundColor Green
        shell: powershell

      - name: Setup MediaPipe with Bazel
        run: |
          Write-Host "Setting up MediaPipe with Bazel..." -ForegroundColor Yellow

          # Clone MediaPipe repository
          git clone https://github.com/google/mediapipe.git
          cd mediapipe

          # Install Bazel for Windows
          $bazelVersion = "6.4.0"
          $bazelUrl = "https://github.com/bazelbuild/bazel/releases/download/$bazelVersion/bazel-$bazelVersion-windows-x86_64.exe"
          $bazelExe = "bazel.exe"

          Write-Host "Downloading Bazel v$bazelVersion..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $bazelUrl -OutFile $bazelExe

          # Set Bazel environment variables
          $env:BAZEL_SH = "C:\msys64\usr\bin\bash.exe"
          $env:BAZEL_VS = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools"
          $env:BAZEL_VC = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC"

          Write-Host "Bazel setup completed" -ForegroundColor Green
        shell: powershell

      - name: Build MediaPipe C++ Libraries
        run: |
          cd mediapipe

          Write-Host "Building MediaPipe C++ libraries..." -ForegroundColor Yellow

          # Build MediaPipe framework and face landmark libraries
          .\bazel.exe build --define MEDIAPIPE_DISABLE_GPU=1 //mediapipe/framework:calculator_framework
          .\bazel.exe build --define MEDIAPIPE_DISABLE_GPU=1 //mediapipe/modules/face_landmark:face_landmark_front_cpu
          .\bazel.exe build --define MEDIAPIPE_DISABLE_GPU=1 //mediapipe/framework/formats:image_frame
          .\bazel.exe build --define MEDIAPIPE_DISABLE_GPU=1 //mediapipe/framework/formats:image_frame_opencv

          Write-Host "MediaPipe libraries built successfully" -ForegroundColor Green
        shell: powershell

      - name: Prepare MediaPipe for CMake
        run: |
          Write-Host "Preparing MediaPipe for CMake integration..." -ForegroundColor Yellow

          # Create MediaPipe build directory structure
          $mediapipeDir = "${{ github.workspace }}/mediapipe_build"
          New-Item -ItemType Directory -Path $mediapipeDir -Force | Out-Null
          New-Item -ItemType Directory -Path "$mediapipeDir/include" -Force | Out-Null
          New-Item -ItemType Directory -Path "$mediapipeDir/lib" -Force | Out-Null

          # Copy MediaPipe headers
          Copy-Item -Path "mediapipe/mediapipe/framework/*.h" -Destination "$mediapipeDir/include/" -Recurse -Force
          Copy-Item -Path "mediapipe/mediapipe/framework/formats/*.h" -Destination "$mediapipeDir/include/formats/" -Recurse -Force
          Copy-Item -Path "mediapipe/mediapipe/modules/face_landmark/*.h" -Destination "$mediapipeDir/include/face_landmark/" -Recurse -Force

          # Copy built libraries (they might be in different locations)
          $bazelBin = "mediapipe/bazel-bin"
          if (Test-Path "$bazelBin/mediapipe/framework") {
              Copy-Item -Path "$bazelBin/mediapipe/framework/*.lib" -Destination "$mediapipeDir/lib/" -Force
          }
          if (Test-Path "$bazelBin/mediapipe/modules/face_landmark") {
              Copy-Item -Path "$bazelBin/mediapipe/modules/face_landmark/*.lib" -Destination "$mediapipeDir/lib/" -Force
          }

          # Set environment variables for CMake
          $env:MEDIAPIPE_ROOT = $mediapipeDir
          $env:MEDIAPIPE_INCLUDE_DIR = "$mediapipeDir/include"
          $env:MEDIAPIPE_LIB_DIR = "$mediapipeDir/lib"

          Write-Host "MediaPipe prepared for CMake at: $mediapipeDir" -ForegroundColor Green
        shell: powershell

      - name: Configure CMake
        run: |
          cd CppBloodPressureDLL
          # vcpkgツールチェーンファイルを削除
          cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DONNXRUNTIME_ROOT=${{ github.workspace }}/onnxruntime -DMEDIAPIPE_ROOT=${{ github.workspace }}/mediapipe_build -DOpenCV_DIR=${{ github.workspace }}/opencv/build
        shell: powershell

      - name: Build DLL
        run: |
          cd CppBloodPressureDLL
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

          # Check if DLL was built successfully
          $dllPath = "build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            $size = [math]::Round((Get-Item $dllPath).Length / 1MB, 2)
            Write-Host "DLL built successfully: $dllPath ($size MB)" -ForegroundColor Green
            
            # Copy DLL to test directory
            Copy-Item $dllPath "test/" -Force
          } else {
            Write-Host "DLL build failed" -ForegroundColor Red
            exit 1
          }
        shell: powershell

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Build C# Test Application
        run: |
          cd CppBloodPressureDLL/test
          dotnet restore CSharpTest.csproj
          dotnet build CSharpTest.csproj -c ${{ env.BUILD_TYPE }} --no-restore

          if ($LASTEXITCODE -ne 0) {
            Write-Host "C# test build failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "C# test application built successfully" -ForegroundColor Green
        shell: powershell

      - name: Copy real sample video for testing
        run: |
          cd CppBloodPressureDLL/test

          # Copy the real sample video for testing
          if (Test-Path "../../sample-data/sample_1M.webm") {
            Copy-Item "../../sample-data/sample_1M.webm" "sample_video.webm" -Force
            $size = [math]::Round((Get-Item "sample_video.webm").Length / 1MB, 2)
            Write-Host "Real sample video copied for testing: sample_video.webm ($size MB)" -ForegroundColor Green
          } else {
            Write-Host "Warning: Real sample video not found, creating dummy video" -ForegroundColor Yellow
            "dummy video content for testing" | Out-File -FilePath "sample_video.webm" -Encoding UTF8
          }
        shell: powershell

      - name: Run C# Integration Test
        run: |
          cd CppBloodPressureDLL/test

          # Set up environment
          $env:PATH = "$PWD;" + $env:PATH

          # Run test
          dotnet run --project CSharpTest.csproj --no-build -c ${{ env.BUILD_TYPE }}

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Integration test failed" -ForegroundColor Red
            exit 1
          }

          Write-Host "Integration test passed" -ForegroundColor Green
        shell: powershell

      - name: Package Distribution
        run: |
          Write-Host "Creating distribution package..." -ForegroundColor Yellow

          New-Item -ItemType Directory -Path "dist_cpp" -Force | Out-Null

          # Copy DLL
          $dllPath = "CppBloodPressureDLL/build/bin/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          if (!(Test-Path $dllPath)) {
            $dllPath = "CppBloodPressureDLL/build/lib/${{ env.BUILD_TYPE }}/BloodPressureDLL.dll"
          }

          if (Test-Path $dllPath) {
            Copy-Item $dllPath "dist_cpp/" -Force
          }

          # Copy models
          Copy-Item "CppBloodPressureDLL/models" "dist_cpp/" -Recurse -Force

          # Copy test application
          Copy-Item "CppBloodPressureDLL/test/bin/${{ env.BUILD_TYPE }}/net6.0/*" "dist_cpp/" -Force

          # Copy required runtime libraries
          $vcpkgDir = "${{ github.workspace }}/vcpkg/installed/x64-windows"
          if (Test-Path "$vcpkgDir/bin") {
            Get-ChildItem "$vcpkgDir/bin/*.dll" | ForEach-Object {
              Copy-Item $_.FullName "dist_cpp/" -Force
            }
          }

          # Calculate size
          $totalSize = (Get-ChildItem -Path "dist_cpp" -Recurse -File | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          Write-Host "Distribution package created: $sizeMB MB" -ForegroundColor Green
        shell: powershell

      - name: Upload Distribution Package
        uses: actions/upload-artifact@v4
        with:
          name: BloodPressureDLL-Cpp-${{ env.BUILD_TYPE }}-${{ github.sha }}
          path: dist_cpp/
          retention-days: 30

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            CppBloodPressureDLL/build/
            *.log
          retention-days: 7
