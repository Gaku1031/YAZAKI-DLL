name: Build Optimized BloodPressureDLL (sub)

on:
  # push:
  #   branches: [main, develop]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:

jobs:
  build-optimized:
    runs-on: windows-latest

    strategy:
      matrix:
        config:
          - name: "Individual Libraries + dlib"
            cmake_options: "-DUSE_INDIVIDUAL_OPENCV_LIBS=ON -DUSE_GITHUB_ACTIONS_OPTIMIZED=ON"
            expected_size: "33MB"
            description: "Individual OpenCV libraries (47% size reduction)"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          Get-ChildItem -Name
          echo "CppBloodPressureDLL directory exists: $(Test-Path CppBloodPressureDLL)"
          if (Test-Path CppBloodPressureDLL) {
            echo "CppBloodPressureDLL contents:"
            Get-ChildItem CppBloodPressureDLL -Name
          }
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: "3.25.0"

      - name: Install vcpkg
        run: |
          echo "Installing vcpkg..."
          # 既存のvcpkgディレクトリを削除してから再インストール
          if (Test-Path "C:\vcpkg") {
            echo "Removing existing vcpkg installation..."
            Remove-Item "C:\vcpkg" -Recurse -Force
          }
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV

          # vcpkgの設定を確認
          echo "vcpkg version:"
          C:\vcpkg\vcpkg version
          echo "Available triplets:"
          C:\vcpkg\vcpkg help triplet
          echo "Note: Using x64-windows triplet for dynamic linking"
      - name: Update vcpkg packages
        run: |
          echo "Updating vcpkg package information..."
          C:\vcpkg\vcpkg update
          C:\vcpkg\vcpkg upgrade --no-dry-run
      - name: Install OpenCV via vcpkg
        run: |
          echo "Installing OpenCV 4.8.0 via vcpkg with dynamic linking..."
          # 動的リンクを明示的に指定してOpenCVをインストール
          C:\vcpkg\vcpkg install opencv4:x64-windows
          C:\vcpkg\vcpkg install opencv4[contrib]:x64-windows
          C:\vcpkg\vcpkg install opencv4[dnn]:x64-windows

          # OpenCVのインストールを確認
          if (Test-Path "C:\vcpkg\installed\x64-windows") {
            echo "OpenCV installed successfully via vcpkg"
            echo "OpenCV directory contents:"
            Get-ChildItem "C:\vcpkg\installed\x64-windows" -Name
            echo "OpenCV lib directory contents:"
            Get-ChildItem "C:\vcpkg\installed\x64-windows\lib" -Name
            echo "OpenCV share directory contents:"
            Get-ChildItem "C:\vcpkg\installed\x64-windows\share" -Name
            
            # OpenCV DLLの存在を確認
            echo "Checking for OpenCV DLLs..."
            $opencvDlls = Get-ChildItem "C:\vcpkg\installed\x64-windows" -Recurse -Filter "*.dll" | Where-Object { $_.Name -like "*opencv*" }
            if ($opencvDlls) {
              echo "Found OpenCV DLLs:"
              $opencvDlls | ForEach-Object { echo "  $($_.FullName)" }
            } else {
              echo "No OpenCV DLLs found - might be static build"
            }
          } else {
            echo "OpenCV installation failed"
            exit 1
          }
          echo "OpenCV_DIR=C:\vcpkg\installed\x64-windows\share\opencv4" >> $env:GITHUB_ENV
      - name: Install dlib via vcpkg
        run: |
          echo "Installing dlib via vcpkg..."
          C:\vcpkg\vcpkg install dlib:x64-windows
          if (Test-Path "C:\vcpkg\installed\x64-windows\share\dlib") {
            echo "dlib installed successfully via vcpkg"
          } else {
            echo "dlib installation failed"
            exit 1
          }
          echo "dlib_DIR=C:\vcpkg\installed\x64-windows\share\dlib" >> $env:GITHUB_ENV
      - name: Install Eigen3 via vcpkg
        run: |
          echo "Installing Eigen3 via vcpkg..."
          C:\vcpkg\vcpkg install eigen3:x64-windows
          if (Test-Path "C:\vcpkg\installed\x64-windows\share\eigen3") {
            echo "Eigen3 installed successfully via vcpkg"
          } else {
            echo "Eigen3 installation failed"
            exit 1
          }
          echo "EIGEN3_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include" >> $env:GITHUB_ENV
      - name: Install ONNX Runtime
        run: |
          echo "Installing ONNX Runtime..."
          Invoke-WebRequest -Uri "https://github.com/microsoft/onnxruntime/releases/download/v1.15.1/onnxruntime-win-x64-1.15.1.zip" -OutFile "onnxruntime.zip"
          Expand-Archive -Path "onnxruntime.zip" -DestinationPath "C:\onnxruntime" -Force

          # ONNX Runtimeのインストールを確認
          if (Test-Path "C:\onnxruntime\onnxruntime-win-x64-1.15.1\include\onnxruntime_cxx_api.h") {
            echo "ONNX Runtime installed successfully"
            echo "ONNX Runtime include directory contents:"
            Get-ChildItem "C:\onnxruntime\onnxruntime-win-x64-1.15.1\include" -Name
            echo "ONNX Runtime lib directory contents:"
            Get-ChildItem "C:\onnxruntime\onnxruntime-win-x64-1.15.1\lib" -Name
          } else {
            echo "ONNX Runtime installation failed - header file not found"
            echo "ONNX Runtime directory structure:"
            if (Test-Path "C:\onnxruntime") {
              Get-ChildItem "C:\onnxruntime" -Recurse -Name
            } else {
              echo "C:\onnxruntime directory does not exist"
            }
            exit 1
          }

          echo "ONNXRuntime_DIR=C:\onnxruntime\onnxruntime-win-x64-1.15.1" >> $env:GITHUB_ENV
          echo "ONNXRuntime_INCLUDE_DIRS=C:\onnxruntime\onnxruntime-win-x64-1.15.1\include" >> $env:GITHUB_ENV
          echo "ONNXRuntime_LIBRARIES=C:\onnxruntime\onnxruntime-win-x64-1.15.1\lib\onnxruntime.lib" >> $env:GITHUB_ENV
      - name: Download dlib face detection model
        run: |
          echo "Downloading dlib face detection model..."
          # 複数のソースからダウンロードを試行
          $urls = @(
            "http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2",
            "https://github.com/davisking/dlib-models/raw/master/shape_predictor_68_face_landmarks.dat.bz2"
          )
          $success = $false
          foreach ($url in $urls) {
            try {
              echo "Trying to download from: $url"
              Invoke-WebRequest -Uri $url -OutFile "shape_predictor_68_face_landmarks.dat.bz2" -TimeoutSec 300
              
              # ファイルサイズをチェック
              $fileSize = (Get-Item "shape_predictor_68_face_landmarks.dat.bz2").Length
              if ($fileSize -gt 1000000) {  # 1MB以上
                echo "Download successful, file size: $fileSize bytes"
                $success = $true
                break
              } else {
                echo "Downloaded file too small, trying next source"
              }
            } catch {
              echo "Failed to download from $url"
            }
          }
          if (-not $success) {
            echo "All download attempts failed"
            exit 1
          }
          # 解凍を試行
          try {
            # PowerShellのExpand-Archiveを使用（bzip2形式はサポートされていないため、別の方法を試行）
            echo "Attempting to extract bzip2 file..."
            
            # 7zipが利用可能かチェック
            if (Get-Command "7z" -ErrorAction SilentlyContinue) {
              7z x shape_predictor_68_face_landmarks.dat.bz2
            } else {
              # 代替方法：Pythonを使用して解凍
              echo "Using Python to extract bzip2 file..."
              python -c "import bz2; import shutil; shutil.copyfileobj(bz2.open('shape_predictor_68_face_landmarks.dat.bz2', 'rb'), open('shape_predictor_68_face_landmarks.dat', 'wb'))"
            }
          } catch {
            echo "Failed to extract bzip2 file"
            exit 1
          }
          # モデルファイルをCppBloodPressureDLL/modelsディレクトリにコピー
          if (Test-Path "shape_predictor_68_face_landmarks.dat") {
            copy "shape_predictor_68_face_landmarks.dat" "CppBloodPressureDLL\models\"
            echo "dlib face detection model downloaded and extracted successfully"
          } else {
            echo "Failed to extract dlib face detection model"
            exit 1
          }
      - name: Create build directory
        run: |
          mkdir build
          cd build
      - name: Debug CMake paths
        run: |
          echo "Current directory: $(pwd)"
          echo "Parent directory contents:"
          Get-ChildItem .. -Name
          echo "CppBloodPressureDLL exists: $(Test-Path ..\CppBloodPressureDLL)"
          if (Test-Path ..\CppBloodPressureDLL) {
            echo "CppBloodPressureDLL contents:"
            Get-ChildItem ..\CppBloodPressureDLL -Name
          }
      - name: Configure CMake
        run: |
          $workspace = "$env:GITHUB_WORKSPACE"
          $opencvDir = "$env:OpenCV_DIR"
          $vcpkgRoot = "$env:VCPKG_ROOT"
          $onnxRuntimeDir = "$env:ONNXRuntime_DIR"
          $onnxRuntimeInclude = "$env:ONNXRuntime_INCLUDE_DIRS"
          $onnxRuntimeLib = "$env:ONNXRuntime_LIBRARIES"
          echo "OpenCV_DIR: $opencvDir"
          echo "VCPKG_ROOT: $vcpkgRoot"
          echo "ONNXRuntime_DIR: $onnxRuntimeDir"
          echo "ONNXRuntime_INCLUDE_DIRS: $onnxRuntimeInclude"
          echo "ONNXRuntime_LIBRARIES: $onnxRuntimeLib"

          # ONNX Runtimeのヘッダーファイルの存在確認
          if (Test-Path "$onnxRuntimeInclude\onnxruntime_cxx_api.h") {
            echo "ONNX Runtime header file found"
          } else {
            echo "ONNX Runtime header file not found at: $onnxRuntimeInclude\onnxruntime_cxx_api.h"
            echo "Available files in ONNX Runtime include directory:"
            if (Test-Path $onnxRuntimeInclude) {
              Get-ChildItem $onnxRuntimeInclude -Name
            } else {
              echo "ONNX Runtime include directory does not exist"
            }
            exit 1
          }

          # vcpkgツールチェーンファイルを使用（動的リンクを明示的に指定）
          cmake -G "Visual Studio 17 2022" -A x64 `
                -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot\scripts\buildsystems\vcpkg.cmake" `
                -DVCPKG_TARGET_TRIPLET=x64-windows `
                -DONNXRuntime_DIR="$onnxRuntimeDir" `
                -DONNXRuntime_INCLUDE_DIRS="$onnxRuntimeInclude" `
                -DONNXRuntime_LIBRARIES="$onnxRuntimeLib" `
                ${{ matrix.config.cmake_options }} `
                "$workspace\CppBloodPressureDLL"
          echo "Configured with: ${{ matrix.config.cmake_options }}"
          echo "Workspace: $workspace"
      - name: Build
        run: |
          cmake --build . --config Release --parallel 4
          echo "Build completed for ${{ matrix.config.name }}"

          # ビルド後のディレクトリ構造を確認
          echo "Build directory structure:"
          Get-ChildItem -Recurse -Name | Sort-Object

          # DLLとテストアプリの場所を確認
          echo "Looking for BloodPressureDLL.dll:"
          Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*BloodPressureDLL*" }

          echo "Looking for test_app.exe:"
          Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*test_app*" }
      - name: Measure DLL size
        run: |
          # 複数の可能性のあるパスをチェック
          $possiblePaths = @(
            "Release\BloodPressureDLL.dll",
            "bin\Release\BloodPressureDLL.dll",
            "bin\BloodPressureDLL.dll",
            "Release\bin\BloodPressureDLL.dll"
          )

          $dllPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $dllPath = $path
              echo "Found DLL at: $dllPath"
              break
            }
          }

          if ($dllPath) {
            $size = (Get-Item $dllPath).Length
            $sizeMB = [math]::Round($size / 1MB, 2)
            echo "DLL size: $sizeMB MB"
            echo "Expected size: ${{ matrix.config.expected_size }}"
            
            if ($sizeMB -lt 60) {
              echo "Size optimization successful: $sizeMB MB (vs 60MB world)"
            } else {
              echo "Size optimization failed: $sizeMB MB"
            }
          } else {
            echo "DLL not found in any expected location"
            echo "Checking build directory structure:"
            Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*BloodPressureDLL*" }
            exit 1
          }
      - name: Run performance test
        run: |
          echo "Running performance test..."

          # テストアプリケーションの場所を特定
          $possibleTestPaths = @(
            "Release\test_app.exe",
            "bin\Release\test_app.exe",
            "bin\test_app.exe",
            "Release\bin\test_app.exe"
          )

          $testAppPath = $null
          foreach ($path in $possibleTestPaths) {
            if (Test-Path $path) {
              $testAppPath = $path
              echo "Found test app at: $testAppPath"
              break
            }
          }

          if ($testAppPath) {
            echo "Test application built successfully"
            echo "Performance test would run with actual video file"
          } else {
            echo "Test application not found in any expected location"
            echo "Checking for test_app.exe:"
            Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*test_app*" }
            exit 1
          }
          echo "Performance test completed"
      - name: Create optimized package
        run: |
          echo "Creating optimized package..."
          $pkgName = "${{ matrix.config.name }}".Replace(' ', '_').Replace('+', 'plus').Replace('=', '').Replace('"', '').Replace("'", '')
          echo "PKG_NAME=$pkgName" >> $env:GITHUB_ENV
          mkdir "$pkgName"

          # DLLの場所を特定
          $possiblePaths = @(
            "Release\BloodPressureDLL.dll",
            "bin\Release\BloodPressureDLL.dll",
            "bin\BloodPressureDLL.dll",
            "Release\bin\BloodPressureDLL.dll"
          )

          $dllPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $dllPath = $path
              echo "Found DLL at: $dllPath"
              break
            }
          }

          if ($dllPath) {
            copy $dllPath "$pkgName/"
            echo "Copied DLL from: $dllPath"
          } else {
            echo "DLL not found for packaging"
            exit 1
          }
          # Individual Librariesの場合、必要なOpenCV DLLのみをコピー
          if ("${{ matrix.config.cmake_options }}" -like "*INDIVIDUAL*") {
            echo "Debugging OpenCV installation..."
            echo "Checking vcpkg installed directory structure:"
            if (Test-Path "C:\vcpkg\installed\x64-windows") {
              echo "vcpkg installed directory exists"
              Get-ChildItem "C:\vcpkg\installed\x64-windows" -Recurse -Name | Where-Object { $_ -like "*opencv*" }
            } else {
              echo "vcpkg installed directory does not exist"
            }
            
            # vcpkgでインストールされたOpenCV DLLをコピー
            $opencvDirs = @(
              "C:\vcpkg\installed\x64-windows\bin",
              "C:\vcpkg\installed\x64-windows\debug\bin",
              "C:\vcpkg\installed\x64-windows\lib",
              "C:\vcpkg\installed\x64-windows\debug\lib",
              "C:\vcpkg\installed\x64-windows\share\opencv4",
              "C:\vcpkg\installed\x64-windows\share\opencv4\bin",
              "C:\vcpkg\installed\x64-windows\share\opencv4\lib"
            )
            
            # 実際に存在するOpenCV DLLを検索
            echo "Searching for OpenCV DLLs in vcpkg directories..."
            $foundOpencvDlls = @()
            foreach ($dir in $opencvDirs) {
              if (Test-Path $dir) {
                echo "Checking directory: $dir"
                $dlls = Get-ChildItem $dir -Name -Filter "*.dll" | Where-Object { $_ -like "*opencv*" }
                if ($dlls) {
                  echo "Found OpenCV DLLs in $dir`:"
                  $dlls | ForEach-Object { echo "  $_" }
                  $foundOpencvDlls += $dlls
                }
              }
            }
            
            # 必要なOpenCV DLLのリスト（バージョン番号は実際のものに合わせる）
            $requiredOpencvDlls = @("opencv_core4", "opencv_imgproc4", "opencv_imgcodecs4", "opencv_objdetect4", "opencv_dnn4")
            $foundAll = $true
            
            foreach ($requiredDll in $requiredOpencvDlls) {
              $found = $false
              $matchingDlls = $foundOpencvDlls | Where-Object { $_ -like "*$requiredDll*" }
              
              if ($matchingDlls) {
                # 最初に見つかったDLLをコピー
                $dllToCopy = $matchingDlls[0]
                foreach ($dir in $opencvDirs) {
                  $dllPath = Join-Path $dir $dllToCopy
                  if (Test-Path $dllPath) {
                    copy $dllPath "$pkgName/"
                    echo "Copied $dllToCopy from $dir"
                    $found = $true
                    break
                  }
                }
              }
              
              if (-not $found) {
                echo "ERROR: $requiredDll DLL not found in any known OpenCV directory"
                echo "Available OpenCV DLLs: $($foundOpencvDlls -join ', ')"
                $foundAll = $false
              }
            }
            
            if (-not $foundAll) {
              echo "One or more required OpenCV DLLs are missing."
              echo "This might be because OpenCV was built as static libraries or the DLLs are in a different location."
              echo "Trying alternative approach: using system OpenCV DLLs or skipping DLL copy for static linking..."
              
              # 代替案1: システムのOpenCV DLLを探す
              $systemOpencvDirs = @(
                "C:\Program Files\opencv\build\x64\vc16\bin",
                "C:\opencv\build\x64\vc16\bin",
                "C:\Program Files (x86)\opencv\build\x64\vc16\bin"
              )
              
              $foundSystemDlls = $false
              foreach ($dir in $systemOpencvDirs) {
                if (Test-Path $dir) {
                  echo "Found system OpenCV directory: $dir"
                  $systemDlls = Get-ChildItem $dir -Name -Filter "*.dll" | Where-Object { $_ -like "*opencv*" }
                  if ($systemDlls) {
                    echo "Copying system OpenCV DLLs from $dir"
                    foreach ($dll in $systemDlls) {
                      $dllPath = Join-Path $dir $dll
                      copy $dllPath "$pkgName/"
                      echo "Copied system DLL: $dll"
                    }
                    $foundSystemDlls = $true
                    break
                  }
                }
              }
              
                          if (-not $foundSystemDlls) {
              echo "No system OpenCV DLLs found. Trying to copy from build directory..."
              
              # ビルドディレクトリからOpenCV DLLをコピー
              $buildDlls = @(
                "bin\Release\opencv_core4.dll",
                "bin\Release\opencv_imgproc4.dll", 
                "bin\Release\opencv_imgcodecs4.dll",
                "bin\Release\opencv_objdetect4.dll",
                "bin\Release\opencv_dnn4.dll"
              )
              
              $foundBuildDlls = $true
              foreach ($dll in $buildDlls) {
                if (Test-Path $dll) {
                  copy $dll "$pkgName/"
                  echo "Copied build DLL: $dll"
                } else {
                  echo "Build DLL not found: $dll"
                  $foundBuildDlls = $false
                }
              }
              
              if (-not $foundBuildDlls) {
                echo "No build OpenCV DLLs found. Assuming static linking."
                echo "Note: If this is a static build, no OpenCV DLLs are needed."
                echo "Continuing with package creation..."
              }
            }
            }
          }
          # dlibは静的リンクされるため、DLLのコピーは不要
          copy "C:\onnxruntime\onnxruntime-win-x64-1.15.1\lib\onnxruntime.dll" "$pkgName/"

                    # すべての依存DLLをコピー（安全性を重視）
          echo "Copying all generated DLLs for maximum compatibility..."
          $allDlls = Get-ChildItem "bin\Release" -Filter "*.dll" | ForEach-Object { $_.Name }
          echo "Found DLLs in bin\Release:"
          $allDlls | ForEach-Object { echo "  $_" }

          foreach ($dll in $allDlls) {
            $dllPath = "bin\Release\$dll"
            copy $dllPath "$pkgName/"
            echo "Copied DLL: $dll"
          }
          mkdir "$pkgName\models"
          copy CppBloodPressureDLL\models\*.onnx "$pkgName\models\"
          copy CppBloodPressureDLL\models\*.pb "$pkgName\models\"
          copy CppBloodPressureDLL\models\*.pbtxt "$pkgName\models\"
          copy CppBloodPressureDLL\models\shape_predictor_68_face_landmarks.dat "$pkgName\models\"
          mkdir "$pkgName\include"
          copy CppBloodPressureDLL\include\*.h "$pkgName\include\"
          copy CppBloodPressureDLL\README.md "$pkgName/"
          copy CppBloodPressureDLL\INTEGRATION_GUIDE.md "$pkgName/"
          # パッケージ情報ファイルを作成
          powershell -File "CppBloodPressureDLL\create_package_info.ps1" -ConfigName "$pkgName" -Description "${{ matrix.config.description }}" -SizeMB "$sizeMB" -GitHubRunId "${{ github.run_id }}"
          echo "Package created: $pkgName"
          echo "==== Package contents ===="
          Get-ChildItem -Recurse "$pkgName" | Select-Object FullName,Length

          # DLLの詳細情報を表示
          echo "==== Included DLLs ===="
          $includedDlls = Get-ChildItem "$pkgName" -Filter "*.dll" | ForEach-Object { $_.Name }
          $includedDlls | ForEach-Object { echo "  $_" }
          echo "Total DLLs included: $($includedDlls.Count)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}-package
          path: ${{ env.PKG_NAME }}/
          retention-days: 30

      - name: Create release summary
        run: |
          echo "## Optimization Results for ${{ matrix.config.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ matrix.config.cmake_options }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Description**: ${{ matrix.config.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Size**: ${{ matrix.config.expected_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actual Size**: $sizeMB MB" >> $GITHUB_STEP_SUMMARY
          echo "- **Size Reduction**: $([math]::Round((60 - $sizeMB) / 60 * 100, 1))%" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact**: ${{ matrix.config.name }}-package" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Create download instructions
        run: |
          echo "## Download Instructions" >> $GITHUB_STEP_SUMMARY
          echo "After the build completes, you can download optimized packages from the Actions tab:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Actions tab in this repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on the latest workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download the package that best fits your needs:" >> $GITHUB_STEP_SUMMARY
          echo "   - **Individual Libraries + dlib**: 47% size reduction, full features" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
