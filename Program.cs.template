using System;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;
class Program {
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void BPCallback(string requestId, int maxBP, int minBP, string csv, string errorsJson);
    [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
    public static extern int InitializeBP(StringBuilder outBuf, int bufSize, string modelDir);
    [DllImport("BloodPressureDLL.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
    public static extern int StartBloodPressureAnalysisRequest(StringBuilder outBuf, int bufSize, string requestId, int height, int weight, int sex, string moviePath, BPCallback callback);
    static void Main() {
        // 依存DLLとmodelsディレクトリの存在・サイズチェック
        string[] requiredFiles = { "BloodPressureDLL.dll", "onnxruntime.dll", "opencv_world480.dll", "zlib.dll" };
        foreach (var file in requiredFiles) {
            if (!File.Exists(file)) {
                Console.WriteLine($"[ERROR] {file} not found in current directory!");
                return;
            } else {
                var info = new FileInfo(file);
                Console.WriteLine($"[INFO] {file} size: {info.Length} bytes");
            }
        }
        if (!Directory.Exists("models")) {
            Console.WriteLine("[ERROR] models directory not found!");
            return;
        } else {
            foreach (var f in Directory.GetFiles("models")) {
                var info = new FileInfo(f);
                Console.WriteLine($"[INFO] models/{info.Name} size: {info.Length} bytes");
            }
        }
        var outBuf = new StringBuilder(1024);
        string modelDir = Path.Combine(Directory.GetCurrentDirectory(), "models");
        int initResult = InitializeBP(outBuf, outBuf.Capacity, modelDir);
        Console.WriteLine($"InitializeBP result: {initResult}, outBuf: '{outBuf}'");
        if (initResult != 0) { Console.WriteLine("DLL初期化失敗"); return; }
        string requestId = DateTime.Now.ToString("yyyyMMddHHmmssfff") + "_TEST001_000000001";
        int height = 170, weight = 65, sex = 1;
        string video = "sample-data\\sample_1M.webm";
        bool callbackCalled = false;
        BPCallback callback = (reqId, maxBP, minBP, csv, errorsJson) => {
            Console.WriteLine($"[CALLBACK] requestId={reqId}, SBP={maxBP}, DBP={minBP}");
            if (!string.IsNullOrEmpty(csv)) Console.WriteLine($"[CALLBACK] CSV length: {csv.Length}");
            if (!string.IsNullOrEmpty(errorsJson) && errorsJson != "[]") Console.WriteLine($"[CALLBACK] Errors: {errorsJson}");
            callbackCalled = true;
        };
        outBuf.Clear();
        int ret = StartBloodPressureAnalysisRequest(outBuf, outBuf.Capacity, requestId, height, weight, sex, video, callback);
        Console.WriteLine($"StartBloodPressureAnalysisRequest returned: {ret}, outBuf: '{outBuf}'");
        if (!callbackCalled) { Console.WriteLine("[ERROR] コールバックが呼ばれませんでした"); }
    }
} 
